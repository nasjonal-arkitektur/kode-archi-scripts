/*
 * CommonFunctions
 */
load(__DIR__ + "Constants.ajs");

console.clear();

var log_ListElements = function(elementList, headerText) {

	console.log(headerText);	
	
	if (elementList != null) {
		var i = 0;
		
		elementList.each(function(e) {
			i++;
			
			$(e).parent().each(function(parent) {
				console.log("   " + i + " '" + e.name + "'(" + e.id + ") in " + parent.type + " '" + parent.name + "'" );	
				/*
				console.log("   " + "x = " + e.bounds.x);
				console.log("   " + "y = " + e.bounds.y);
				console.log("   " + "width = " + e.bounds.width);
				console.log("   " + "height = " + e.bounds.height);
				*/
			});
				
		});
	}
}

var lib_GetDuplicateModelItems = function(elm) {

    return $("element").filter(function(o) {
        return ( (o.name == elm.name) && (o.type == elm.type) );
    });
}

function lib_HelloWorld() {

	console.log("Hello world!");

}

var lib_FindAllModelElementsWithName = function(elementName) {

    return $("element").filter(function(o) {
        return ( (o.name == elementName) );
    });
}

var lib_FindElementsWithNameInList = function(elementName, list) {

    return list.filter(function(o) {
        return ( (o.name == elementName) );
    });
}

var lib_getDuplicatesInlistGivenElement = function(elm, list) {

	return list.filter(function(o) {
        return ( (o.name == elm.name) && (o.type == elm.type) );
    });
}


var lib_getDuplicatesInlistGivenElementNameNotType = function(name, list) {

	var elementsWithSameName = lib_FindElementsWithNameInList(name, list); // may contain several element types
	var allDuplicates = [];
	var duplicates = null;
	var types = [];
	elementsWithSameName.each(function(e) {
		console.log("      " + e.name + ", " + e.type + ", " + ", " + " Id = " + e.id);
		
		if (types.indexOf(e.type) < 0) { // don't add duplicate values to this array
			types.push(e.type);
			duplicates = lib_getDuplicatesInlistGivenElement(e, list);
			if (duplicates.size() > 1)
				allDuplicates.push(duplicates);
		}

	});
	
	//console.log("Number of types: " + types.length );
	//console.log("Number of types with duplicates: " + allDuplicates.length );
	return allDuplicates;
	
}

function lib_SliceTrailingCharIfPresent(str, chr) {

//console.log("Unsliced string: " + str);

	//str = str.trim();
	if (str.endsWith(chr))
		str = str.slice(0, -1);

//console.log("Sliced str: " + str);

	return str;
}


function lib_SlicePathSlash(path) {

console.log("Unsliced path: " + path);

	path = path.trim();


	if (path.endsWith("\\"))
		path = path.slice(0, -1);
	if (path.endsWith("/"))
		path = path.slice(0, -1);


	if (path[0] == "\\")
		path = path.slice(1);
	if (path[0] == "/")
		path = path.slice(1);

console.log("Sliced path: " + path);

	return path;
}

function lib_TestExit() {
	console.log("Preliminary test exit...");
	
	console.log("Stack trace:");
	console.log("------------:");	
	err = new Error();
	console.log(err.stack);
	
	exit();
}

function lib_Error(errorTxt) {

	var logTxt = "Error: " + errorTxt + "\n";
	console.log(logTxt);
	window.alert(logTxt);
	
	lib_Stackdump();
	exit();

}


function lib_Stackdump() {
	
	console.log("Stackdump:");
	console.log("---------_");	
	err = new Error();
	console.log(err.stack);
}


function lib_VerifyNotNull(object, dueTo) {

	if (!object) {

		var msg = "Unexpected null-pointer to object!";
		if (dueTo)
			msg += " " + dueTo;

		lib_Error(msg);
	}
}


function lib_TestExit(testMessage){
	
	var logTxt = "Showing testmessage and exiting:\n" + testMessage + "\n";
	console.log(logTxt);
	//window.alert(logTxt);
	
	console.log("Stack trace:");
	console.log("------------:");	
	err = new Error();
	console.log(err.stack);
	
	exit();
}

function lib_Warning(warningTxt) {

	var logTxt = "Warning: " + warningTxt + "\n";
	console.log(logTxt);
	//window.alert(logTxt);
}

function lib_Log(txt) {

	console.log(txt);
}

function lib_Alert(txt) {

	window.alert(txt);
}


function lib_FixExcelCell(cellValue) {
	
	if (!cellValue)
		return "";
	
	let replacedStr = cellValue.replace(/"/g, '""');
	
	if (replacedStr.includes("\n")) {
		replacedStr = "\"" + replacedStr + "\""; // support for multiple lines within an Excel cell
	}		
	
	return replacedStr;

}

function sendGraphQLRequest(query) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");
    
    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);
    
    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: query }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    // Log the GraphQL rate limit remaining
	//var rateLimits = getRateLimits();
	//console.log("GitHub API requests remaining: " + rateLimits.remaining);
	//console.log("Rate limit will be reset at: " + rateLimits.reset);

    return JSON.parse(response);
}

function lib_SortConcepts(concepts, property) {
	
	// ********** Erik: Not yet tested
	
    return concepts.sort((a, b) => {
		
		aProperty = cConcept_GetProperty(a, property);
		bProperty = cConcept_GetProperty(b, property);
		
        // If both concepts have the given property
        if (aProperty && bProperty) {
            // Compare the value of the property for both concepts
            if (aProperty < bProperty) return -1;
            if (aProperty > bProperty) return 1;
            return 0;
        }
        // If only the first concept has the given property
        else if (aProperty) {
            return -1;
        }
        // If only the second concept has the given property
        else if (bProperty) {
            return 1;
        }
        // If neither of the concepts have the given property
        else {
            return 0;
        }
    });
}

function lib_sortConceptsByName(concepts) {
    if (!concepts || concepts.size() === 0) {
        console.log("No concepts provided or the collection is empty.");
        return [];
    }

    // Convert Archi Collection to a JavaScript array
    //concepts = concepts.toArray();

    // Sort the array by concept name
    return concepts.sort(function(a, b) {
        return a.name.localeCompare(b.name);
    });
}