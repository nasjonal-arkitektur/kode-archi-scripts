
/*
 * CBookSectionViewRef
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");
//load(__DIR__ + "c_BookSection.ajs");


function CBookSectionViewRef_autodoc(section, hierarchyLevel) {

	var docString = "";


	// precondition:
	if (section.prop(const_prop_dct_type) != const_conceptType_representation__archimateView) {
		lib_Error(const_prop_dct_type + " != " + const_conceptType_representation__archimateView);
	}
	

	//CBookSectionViewRef_documentElementHiearchy(section, first
	//docString += cView_documentViewAsAsciidocChapters(refView, hierarchyLevel + 1);
	docString += CBookSectionViewRef_documentViewAsAsciidocChapters(section, hierarchyLevel + 1);
	
	
	return docString;


}



function CBookSectionViewRef_documentViewAsAsciidocChapters(section, sectionLevel) {

	var refView = CBookSectionViewRef_getReferencedView(section);

	var docString = "";
	
	var sectionName = "Oversikt"; //rather than section.name
	docString += cBookSection_SectionHeading(sectionName, sectionLevel);
	docString += "\n";

	// take the description from the section object, if not  empty, otherwise from the referenced view
	if (section.documentation)
		docString += section.documentation;
	else
		docString += refView.documentation;
	
	docString += "\n\n";
	docString += "." + section.name;
	docString += "\nimage::" +  section.name + ".png" + "[alt=" + section.name + " image]";
	//old: cView_GetImagePath(view) + "[alt=" + view.name + " image]";
				
	// todo: ",link = ..." for link to published web view
	docString += "\n\n"


	lib_log("Skipping cView_saveViewImageToFile for now***************************************");
	//cView_saveViewImageToFile(view);
	

	var topLevelElms = cView_getTopLevelElementsOf(refView);
	
	
	topLevelElms.each(function(e) {
		
		docString += cView_documentElementHiearchy(refView, e, sectionLevel);
	});	

	lib_log("Skipping cView_saveViewPageToFile... *****************************");
	//cView_saveViewPageToFile(view, docString);



	return docString;
}

function CBookSectionViewRef_getReferencedView(section) {
	
	var refViewId = section.prop(const_prop_view_reference);

	if (!refViewId)
		lib_Error("Missing propery " + const_prop_view_reference + " for " + section.name + " with " + const_prop_dct_type + " = " + const_prop_view_reference);

	// get hold of the referenced view
	var refView = cModel_GetViewWithId(refViewId);
	if (!refView)
		lib_Error("Failed to find referene view with id = " + refViewId + " for CBookSectionViewRef object with name = " + section.name);

 
	return refView;

}

/***
Idea: Create representation objects from viewrefs - look at this code to understand...

        $(e).children().each(function (viewRefs) {
			
			console.log("View ref: " + viewRefs.name + " (" + viewRefs.type + ":" + viewRefs.prop(const_prop_dct_type)+ ")" );

            if ((viewRefs) && ((viewRefs.type == 'archimate-diagram-model') || (viewRefs.type == 'sketch-model'))) {

                // Find the actual linked views
                var viewsCollection = $('archimate-diagram-model');
                viewsCollection.add($('sketch-model'));
				
				var duplicate = false;
				var alreadyFound = false;
                viewsCollection.each(function (linkedView) {
					
					//console.log("a View: " + linkedView.name + ": " + linkedView.id);			
                    // this doesn't cater for duplicate view names, sorry
                    if (linkedView.name === viewRefs.name) {
                        //viewList.push([viewRefs, linkedView]);
						console.log("--viewRefs.name: " + viewRefs.name + ": " + viewRefs.id);
						if (alreadyFound) {
							duplicate = true;
							console.log("Problem: Found more than one view with the name: '" + linkedView.name + "'. You need to resolve this before rerunning the script. Sorry. Exiting..." );
							window.alert("Problem: Found more than one view with the name: '" + linkedView.name + "'. You need to resolve this before rerunning the script. Sorry. Exiting..." );
							//exit();
						}
						else
						 alreadyFound = true;
						
                    }
                });
            }


        });
**/