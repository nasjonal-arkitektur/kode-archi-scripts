/*
 * c_Book
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");
load(__DIR__ + "c_BookSection.ajs");

function cBook_autodoc(bookElement, sectionLevel) {

	var autodocView =  bookElement.view; //needed?
	var book = bookElement.concept;
	var docString = "";

	console.log("Top level element: " + book.name + " (" +  book.prop(const_prop_dct_type) + ")" );

	if (book.prop(const_prop_dct_type) != const_conceptType_representation__book) {
		window.alert("Problem: Expected top level element of dct:type=" +  const_conceptType_representation__book + ". Exiting...");
		exit();
	}


	// generate book header
	docString += cBook_bookHeader(book, sectionLevel);

	//determine first section
	var firstSection = cBook_determineFirstSection(book);
	//console.log("cBook_autodoc: First secton is " + firstSection.name);
	
	// starting with the first section, recursively drill down the hierarchy, go to next sibling section and so on
	docString += cBookSection_autodoc(firstSection, sectionLevel + 1);
	
	return docString;
}

function cBook_bookHeader(book, sectionLevel) {

	var docString = "";
	docString += cBook_asciidocTemplateHeader(book);

	// main chapter caption
	docString += "\n";
	
	var headerString = "=";
	var i;
	for (i = 0; i < sectionLevel; i++) {
		headerString += "=";
	}
	docString += headerString + " "; 
	
	docString += "Om " + book.name;
	//docString += "Oversikt";
	// docString += " - " + book.name;
	docString += "\n";



	// book description
	docString += "\n";
	docString += book.documentation;
	docString += "\n\n";

/* not here-----------------------
	docString += "." + book.name;
	docString += "\nimage::" +  book.name + ".png" + "[alt=" + book.name + " image]";
				
	// todo: ",link = ..." for link to published web view
	docString += "\n\n";
*/

	return docString;
}

function cBook_determineFirstSection(book) {
	
	var firstSection = null;
	var determined = false;
	
	// get the views/sections of the book, as represented by Representation objects with property dct:type = modelx:section:
	var topChapters = null;
	//var bookSubElms = cElement_getSubElements(book);
	var bookSections = cConcept_getSubConcepts(book);


	if (bookSections === null) {
		window.alert("Problem: No sections in book " + book.name + ". Exiting...");
		exit();
	}
	
	

	// Test output list of all sectons
	var test_output_all_sections = true;
	if (test_output_all_sections) {
		bookSections.each(function(s) {
			
			console.log("Book " + book.name + ", section " +  s.name);

		});
	}
	
	// determine which section comes first (assume only one)

	bookSections.each(function(section) {
		
		if (!determined) {
			//console.log("determine firstSection, considering section  " + section.name);
			
			var incomingAssociationRels = $(section).inRels("association-relationship").size(); // i.e. for now consider only association-relationship, but see below

			
			if (incomingAssociationRels == 0) { // i.e. no preceeding chapter at the same hierarchy level
				firstSection = section; // assume, but still need to check...
					
				bookSections.each(function(otherSection) {
					//if (section != otherSection && cConcept_isSubConceptOf(section, otherSection)) {
					if (cConcept_isSubConceptOf(section, otherSection)) {
						console.log(section + " is subsection of " + otherSection);
						firstSection = null;
					}
				});

				if (firstSection) {
					//console.log("cBook_determineFirstSection: First section is " + firstSection.name);
					determined = true;
					//return firstSection;
					
				}

			}
		}
	});
	
	if (!firstSection) {
		window.alert("Problem: Unable to determine which is the first section of book " + book.name + ". Exiting...");
		exit();
	}
	
	return firstSection;

		
}

function cBook_asciidocTemplateHeader(book) {
		
	var docString = "";
	var templateheader = 
	/*
	"////" + "\n" +
	"Guide to the below header attributes:" + "\n\n" +

	"    lang: en; no" + "\n" +
	"    difi_orig_language: en; no" + "\n" +
	"    difi_translation_status: -; missing; incomplete; OK " + "\n" +
	"    keywords_en: comma separated list of english keywords (no controlled vocabulary); TBD" + "\n" +
	"    keywords_no: comma separated list of Norwegian keywords (no controlled vocabulary); TBD  " + "\n\n" +
		
	"Note: The _lang_ value may be overridden by a command line parameter." + "\n" +
	"////" + "\n\n" +
	*/
	
	
	"= " + book.name + "\n" +
	":wysiwig_editing: 1" + "\n" +
	"ifeval::[{wysiwig_editing} == 1]" + "\n" +
	":imagesdir: ../images" + "\n" +
	"endif::[]" + "\n" +
	":toc: left" + "\n" +
	":toclevels: 9" + "\n" +
	":sectnums:" + "\n" +
	":sectnumlevels: 9" + "\n";
	
	/*
	"// The above parameters are processed by scripts included by the following statement" + "\n" +
	"include::../plattform_felles/includes/commonincludes.adoc[]" + "\n\n";
	*/

	docString += templateheader;
	return docString;
}