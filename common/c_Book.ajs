/*
 * c_Book
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");
load(__DIR__ + "c_BookSection.ajs");

function cBook_autodoc(bookElement, hierarchyLevel) {

	var book = bookElement.concept;
	var docString = "";

	console.log("Top level element: " + book.name + " (" +  book.prop(const_prop_dct_type) + ")" );

	if (book.prop(const_prop_dct_type) != const_conceptType_representation__book) {
		window.alert("Problem: Expected top level element of dct:type=" +  const_conceptType_representation__book + ". Exiting...");
		exit();
	}



	// generate book header
	docString += "= " + book.name + "\n\n";  // to-do: SECTIONlEVEL!!!!!		

	//determine first section
	var firstSection = cBook_determineFirstSection(book);
	//console.log("cBook_autodoc: First secton is " + firstSection.name);
	
	// starting with the first section, recursively drill down the hierarchy and go to next sibling section
	docString += cBookSection_autodoc(firstSection, hierarchyLevel);

	//docString += cBookSection_documentViewRef(book, sectionLevel);
}

function cBook_determineFirstSection(book) {
	
	var firstSection = null;
	var determined = false;
	
	// get the views/sections of the book, as represented by Representation objects with property dct:type = modelx:section:
	var topChapters = null;
	//var bookSubElms = cElement_getSubElements(book);
	var bookSections = cConcept_getSubConcepts(book);


	if (bookSections === null) {
		window.alert("Problem: No sections in book " + book.name + ". Exiting...");
		exit();
	}
	
	

	// Test output list of all sectons
	var test_output_all_sections = true;
	if (test_output_all_sections) {
		bookSections.each(function(s) {
			
			console.log("Book " + book.name + ", section " +  s.name);

		});
	}
	
	// determine which section comes first (assume only one)

	bookSections.each(function(section) {
		
		if (!determined) {
			//console.log("determine firstSection, considering section  " + section.name);
			
			var incomingAssociationRels = $(section).inRels("association-relationship").size(); // i.e. for now consider only association-relationship, but see below

			
			if (incomingAssociationRels == 0) { // i.e. no preceeding chapter at the same hierarchy level
				firstSection = section; // assume, but still need to check...
					
				bookSections.each(function(otherSection) {
					//if (section != otherSection && cConcept_isSubConceptOf(section, otherSection)) {
					if (cConcept_isSubConceptOf(section, otherSection)) {
						console.log(section + " is subsection of " + otherSection);
						firstSection = null;
					}
				});

				if (firstSection) {
					//console.log("cBook_determineFirstSection: First section is " + firstSection.name);
					determined = true;
					//return firstSection;
					
				}

			}
		}
	});
	
	if (!firstSection) {
		window.alert("Problem: Unable to determine which is the first section of book " + book.name + ". Exiting...");
		exit();
	}
	
	return firstSection;

		
}

