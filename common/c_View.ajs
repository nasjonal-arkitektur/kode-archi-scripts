/*
 * c_View
 */
 
load(__DIR__ + "../common/c_Folder.ajs");

var m_view = null;

function cView_GetSelectedElements() {

	return $(selection).filter("element");

/*
	$(selection).filter("element").each(function(e) {
		console.log("Selected element: " + e.name );			
	});
*/
	
}

function cView_GetRelativeRenderPath(view) {

	return view.prop(const_prop_viewRelativeRenderPath);
}



function cView_GetSelectedRelationship() {

	$(selection).filter("relationship").each(function(r) {
		console.log("Selected relationship: " + r.name );			
	});
	
}

function cView_GetSelectedConcepts() {


	return $(selection).filter("concept");
	
	/*
	$(selection).filter("concept").each(function(e) {
		console.log("Selected concept: " + e.name );			
	});
	*/
	
}	
	
var cView_GetElementsInView = function(v) {

	//var elements = $(v).children().filter("element");
	//return elements;
	
	var resultingItems = null;
	var viewItems = null;
	
	viewItems = $(view).find().filter("element");

	viewItems.each(function(item) {	
	
		//if (itemType == "concept")
		//	item = item.concept;
	
		if (resultingItems == null) {
			resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1)
				resultingItems.add($(item));
		}
	});
	
	return resultingItems;
}

var cView_GetOtherConceptsInViewWithSameName = function(vu, elm) {

    return $(vu).children().filter("element").filter(function(o) {
		
		return ( (o.name == elm.name) && ( (o.type == elm.type) && (o.concept.id != elm.concept.id)) );
	
    });
}

var cView_GetOtherOccurencesInView = function(vu, elm) {


	console.log("cView_GetOtherOccurencesInView, " + "view = " + vu.name + ", element = " + elm.name);  
	
	/*
    return $(vu).children().filter("element").filter(function(o) { // erik tbd! doesn't work for nested objects - need recursion or ...!!!!!?
		return ( o.concept.id == elm.concept.id );
	*/
	
	return $("element").filter(function(o) { 
		if (o.view == vu)
			return ( o.concept.id == elm.concept.id );
		else
			return null;
	
    });
}

var cView_MergeWithDuplicateElementsInView = function(v) {

	window.prompt("cView_MergeWithDuplicateElementsInView yet to be implemented!? Exiting...");
	exit();

	var elements = $(v).children().filter("element");
	return elements;
}

function cView_GetCurrentLanguage(view) {	
	return view.prop(const_prop_language);
}

function cView_SetCurrentLanguage(view, language) {
	// assume valid language
	
	view.prop(const_prop_current_language, language);
	

}

function cView_CreateMissingProperty(view, propName, propValue) {

	if ( view.prop(propName) === null ) {
		console.log(". Creating missing or empty standard property " + propName + " for " + view.name );
		view.prop(propName, propValue);
	}
}	

function cView_createMissingProperties(view) {

			
		//view.removeProp(const_prop_default_language); // very very temporary!
		//view.removeProp(const_prop_current_language); // very very temporary!
		//CreateMissingProperty(view, const_prop_default_language, const_prop_language_value_no);
		//CreateMissingProperty(view, const_prop_current_language, const_prop_language_value_no);
		
		
		//cView_CreateMissingProperty(view, const_prop_metaLevel, const_prop_metaLevel_value_default);
		cView_CreateMissingProperty(view, const_prop_language, cModel_GetCurrentLanguage() );
		
		if (cModel_GetCurrentLanguage() === "no") {
			cView_CreateMissingProperty(view, const_prop_name_no, view.name );
			cView_CreateMissingProperty(view, const_prop_name_en, "" );
			cView_CreateMissingProperty(view, const_prop_description_no, view.documentation );
			cView_CreateMissingProperty(view, const_prop_description_en, "" );
		}
		else if (cModel_GetCurrentLanguage() === "en") {
			cView_CreateMissingProperty(view, const_prop_name_no, "" );
			cView_CreateMissingProperty(view, const_prop_name_en, view.name );
			cView_CreateMissingProperty(view, const_prop_description_no, "" );
			cView_CreateMissingProperty(view, const_prop_description_en, view.documentation );
		}
			
			
		cView_CreateMissingProperty(view, const_prop_viewRelativeRenderPath, "");	
}


