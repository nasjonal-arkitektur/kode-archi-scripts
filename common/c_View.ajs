/*
 * c_View
 */
 
load(__DIR__ + "../common/c_Folder.ajs");
load(__DIR__ + "../common/c_Model.ajs");
load(__DIR__ + "../common/c_Collection.ajs");
load(__DIR__ + "../common/CommonFunctions.ajs");

var m_view = null;
var option_promptFileSave = false;

function cView_GetSelectedElements() {

	return $(selection).filter("element");

/*
	$(selection).filter("element").each(function(e) {
		console.log("Selected element: " + e.name );			
	});
*/
	
}

function cView_GetRelativeRenderPath(view) {

	var path = "";

	if (const_option_antora) {
		path = view.prop(const_prop_antoraViewPath);
		path = lib_SlicePathSlash(path);
	}
	else
		path = view.prop(const_prop_viewRelativeRenderPath);
	
	return path;
}

function cView_GetPagesFolder(view) {
	var path = "";

	path += cModel_GetRenderingRootPath(view);


	if (const_option_antora) {
		path = lib_SlicePathSlash(path);
		path += "\\" + cView_GetRelativeRenderPath(view) + "\\" + "pages";	
		
	}
	else
		path += view.prop(const_prop_viewRelativeRenderPath);
	
	return path;
}	


function cView_GetImagePath(view) {

	var path = cView_GetImagesFolder(view);
	path = lib_SlicePathSlash(path);
	path += "\\" + view.name + ".png";
	
	
	//console.log("cView_GetImagePath says " + path);

	return path;
}


function cView_GetImagesFolder(view) {

	var path = "";
	
	if (const_option_antora) {
		
		
		if (view.prop(const_prop_antoraViewImagePath)) {
			path = cModel_GetRenderingRootPath();
			path = lib_SlicePathSlash(path);
			path += "\\" + view.prop(const_prop_antoraViewImagePath);
			path = lib_SlicePathSlash(path);
		}
		else
		{	
			path = cModel_GetRenderingRootPath();
			path = lib_SlicePathSlash(path);
			path += "\\" + cView_GetRelativeRenderPath(view) + "\\" + "images";
			console.log("Image path: " + path );	
		}
	}
		
	else
		path = cModel_GetRenderingRootPath() + "\\" + cView_GetRelativeRenderPath(view) + "\\" + const_mediaFolderName;

	return path;
}


function cView_GetSelectedRelationship() {

	console.log("cView_GetSelectedRelationship used? Exiting...");
	exit();

	$(selection).filter("relationship").each(function(r) {
		console.log("Selected relationship: " + r.name );			
	});

}

function cView_GetSelectedConcepts() {


	return $(selection).filter("concept");
	
	/*
	$(selection).filter("concept").each(function(e) {
		console.log("Selected concept: " + e.name );			
	});
	*/
	
}	
	
var cView_GetElementsInView = function(v) {

	//var elements = $(v).children().filter("element");
	//return elements;
	
	var resultingItems = null;
	var viewItems = null;
	
	viewItems = $(v).find().filter("element");

	viewItems.each(function(item) {	
	
		//if (itemType == "concept")
		//	item = item.concept;
	
		if (resultingItems == null) {
			resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1)
				resultingItems.add($(item));
		}
	});
	
	return resultingItems;
}

var cView_GetRelationshipsInView = function(v) {

	var resultingItems = null;
	var viewItems = null;
	
	viewItems = $(view).find().filter("relationship");

	viewItems.each(function(item) {	
	
	
		if (resultingItems == null) {
			resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1)
				resultingItems.add($(item));
		}
	});
	
	return resultingItems;
}

var cView_GetOtherConceptsInViewWithSameName = function(vu, elm) {

    return $(vu).children().filter("element").filter(function(o) {
		
		return ( (o.name == elm.name) && ( (o.type == elm.type) && (o.concept.id != elm.concept.id)) );
	
    });
}

var cView_GetOtherOccurencesInView = function(vu, elm) {


	console.log("cView_GetOtherOccurencesInView, " + "view = " + vu.name + ", element = " + elm.name);  
	
	/*
    return $(vu).children().filter("element").filter(function(o) { // erik tbd! doesn't work for nested objects - need recursion or ...!!!!!?
		return ( o.concept.id == elm.concept.id );
	*/
	
	return $("element").filter(function(o) { 
		if (o.view == vu)
			return ( o.concept.id == elm.concept.id );
		else
			return null;
	
    });
}

var cView_MergeWithDuplicateElementsInView = function(v) {

	window.prompt("cView_MergeWithDuplicateElementsInView yet to be implemented!? Exiting...");
	exit();

	var elements = $(v).children().filter("element");
	return elements;
}

function cView_GetCurrentLanguage(view) {	
	return view.prop(const_prop_language);
}

function cView_SetCurrentLanguage(view, language) {
	// assume valid language
	
	view.prop(const_prop_current_language, language);
	

}

function cView_CreateMissingProperty(view, propName, propValue) {

	if ( view.prop(propName) === null ) {
		console.log(". Creating missing or empty standard property " + propName + " for " + view.name );
		view.prop(propName, propValue);
	}
}	

function cView_createMissingProperties(view) {

			
		//view.removeProp(const_prop_default_language); // very very temporary!
		//view.removeProp(const_prop_current_language); // very very temporary!
		//CreateMissingProperty(view, const_prop_default_language, const_prop_language_value_no);
		//CreateMissingProperty(view, const_prop_current_language, const_prop_language_value_no);
		
		
		//cView_CreateMissingProperty(view, const_prop_metaLevel, const_prop_metaLevel_value_default);
		cView_CreateMissingProperty(view, const_prop_language, cModel_GetCurrentLanguage() );
		
		//if (cModel_GetCurrentLanguage() === "no") {
			cView_CreateMissingProperty(view, const_prop_name_no, view.name );
			cView_CreateMissingProperty(view, const_prop_name_en, "" );
			cView_CreateMissingProperty(view, const_prop_description_no, view.documentation );
			cView_CreateMissingProperty(view, const_prop_description_no, "" );
			cView_CreateMissingProperty(view, const_prop_narrative_no, "" );
		//}
		//else if (cModel_GetCurrentLanguage() === "en") {
			cView_CreateMissingProperty(view, const_prop_name_en, "" );
			cView_CreateMissingProperty(view, const_prop_name_en, view.name );
			cView_CreateMissingProperty(view, const_prop_description_en, "" );
			cView_CreateMissingProperty(view, const_prop_description_en, view.documentation );
			cView_CreateMissingProperty(view, const_prop_narrative_en, "" );
		//}
			
		if (const_option_antora)
		{
			cView_CreateMissingProperty(view, const_prop_antoraViewPath, "");
			cView_CreateMissingProperty(view, const_prop_antoraViewImagePath, "");
		}
		else
			cView_CreateMissingProperty(view, const_prop_viewRelativeRenderPath, "");	
}

function cView_getOutgoingElementRelations(view, element) {
	var allOutgoingElementRelations = cConcept_getOutgoingRelations(element.concept);
	var viewOutgoingElementRelations = allOutgoingRelations;
	
	
}



function cView_asciidocTemplateHeader(view) {
		
	var docString = "";
	var templateheader = 
	/*
	"////" + "\n" +
	"Guide to the below header attributes:" + "\n\n" +

	"    lang: en; no" + "\n" +
	"    difi_orig_language: en; no" + "\n" +
	"    difi_translation_status: -; missing; incomplete; OK " + "\n" +
	"    keywords_en: comma separated list of english keywords (no controlled vocabulary); TBD" + "\n" +
	"    keywords_no: comma separated list of Norwegian keywords (no controlled vocabulary); TBD  " + "\n\n" +
		
	"Note: The _lang_ value may be overridden by a command line parameter." + "\n" +
	"////" + "\n\n" +
	*/
	
	
	"= " + view.name + "\n" +
	":wysiwig_editing: 1" + "\n" +
	"ifeval::[{wysiwig_editing} == 1]" + "\n" +
	":imagesdir: ../images" + "\n" +
	"endif::[]" + "\n" +
	":toc: left" + "\n" +
	":toclevels: 4" + "\n" +
	":sectnums:" + "\n";

	/*
	"// The above parameters are processed by scripts included by the following statement" + "\n" +
	"include::../plattform_felles/includes/commonincludes.adoc[]" + "\n\n";
	*/

	docString += templateheader;
	return docString;
}



function cView_getTopLevelElementsOf(view) {

	var elms = cView_GetElementsInView(view);
	var topLevelElements = null;
	
	
	// note: need to consider elements with no reations in the view + top level elements with

	elms.each(function(e) {

		var doesCompose = false;
		var soleToplevel = true;
		var isTopLevel = true;

		var ownViewRels = $(e).rels();
		ownViewRels.each(function(r) {
			if ((r.type == "composition-relationship"  || r.type == "aggregation-relationship") && r.source.name == e.name) { // TODO: name -> ID!
				doesCompose = true;
				//break;
			}
			else if ((r.type == "composition-relationship"  || r.type == "aggregation-relationship") && r.target.name == e.name) { // TODO: name -> ID!
				soleToplevel = false;
			}
	
		});


		if (doesCompose) {
				
			ownViewRels.each(function(r) {
				if (r.type == "composition-relationship" && r.target.name == e.name) {
					isTopLevel = false;
					//break;
				}
	
			});		
		}
		else if (!soleToplevel){
			isTopLevel = false;
		}

		
		if (isTopLevel) {
			
			if (topLevelElements == null) {
				topLevelElements = $(e);
			}
			else {
				topLevelElements.add($(e));
			}
			
		}


	});
	
	
	return topLevelElements;
}



function cView_getSubElements(view, e) {

//console.log("cView_getSubElements " + e.name);	
	
	var subElements = null;
	var rels = $(e).rels();

	rels.each(function(r) {

//console.log("cView_getSubElements 1 " + r.target.name);
		
		if (r.type == "composition-relationship"  && r.source.id == e.id) {
			
		
			
			if (subElements == null) {
				subElements = $(r.target);
			}
			else {
				subElements.add($(r.target));
			}
		}
	});
	
	return subElements;
}



function cView_documentElementHiearchy(view, e, hierarchyLevel) {
	
	hierarchyLevel++;
	var docString = "";

	if (e.type == "junction")
		return ""


	// element chapter caption

	var headerString = "";
	var i;
	for (i = 0; i < hierarchyLevel; i++) {
		headerString += "=";
	}
	
	docString = headerString + " ";
	docString += e.name;
	docString += "\n";
	
	// Element description
	docString += "\n";
	docString += e.documentation;
	docString += "\n\n";
		
	var subElms = cView_getSubElements(view, e);
	if (subElms != null) {
		subElms.each(function(se) {
			docString += cView_documentElementHiearchy(view, se, hierarchyLevel);
		});
	}
	
	return docString;
}



function cView_saveViewPageToFile(view, docString) {

	var fileN =  cView_GetPagesFolder(view) + "\\" + view.name + ".adoc";
	var fName = null;
	//window.alert("pathAndfileName = " + fileN);

	if (option_promptFileSave)
		fName = window.promptSaveFile( { title: "Save view text", filterExtensions: [ "*.adoc" ], fileName: fileN } );
	else
		fName = fileN;

	if (fName) {
		$.fs.writeFile(fName, docString);
	}
	else {
		window.alert("Error: Undetermined fileName in cView_saveViewPageToFile. Existing...")
	}
}

function cView_saveViewImageToFile(view) {

	var pathAndfileName =  cView_GetImagePath(view);
	var bytes = $.model.renderViewAsBase64(view, "PNG");
	var fileName = null;

	//window.alert("pathAndfileName = " + pathAndfileName);
	if (option_promptFileSave)
		fileName = window.promptSaveFile( { title: "Save view image", filterExtensions: [ "*.png" ], fileName: pathAndfileName } );
	else
		fileName = pathAndfileName;
	
	if (fileName) {
		$.fs.writeFile(fileName, bytes, "BASE64");
	}
	else {
		window.alert("Error: Undetermined fileName in cView_saveViewImageToFile. Exiting...")
		exit();
	}
}


function cView_documentViewAsAsciidocChapters(view) {

	// input: var view = CSelection_GetTheSelectedView();

	var docString = "";
	docString += cView_asciidocTemplateHeader(view);

	var optionSectionLevel = 1; 
	optionSectionLevel = 2; 

	// main chapter caption
	docString += "\n";
	
	if (optionSectionLevel == 1) {
		docString += "== "; 
		docString += view.name;
		docString += "\n";
	}
	else if (optionSectionLevel == 2) {
		docString += "== "; 
		docString += "Generelt";
		// docString += view.name;
		docString += "\n";
		
		optionSectionLevel = 1; // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
	}


	// view description
	docString += "\n";
	docString += view.documentation;
	docString += "\n\n";

	// save image of the archi view to file
	cView_saveViewImageToFile(view);
	
	//if (cView_GetImagePath(view)) {
		docString += "." + view.name;
		
		if (const_option_antora) {		
			docString += "\nimage::" +  view.name + ".png" + "[alt=" + view.name + " image]";
		}
		
		//cView_GetImagePath(view) + "[alt=" + view.name + " image]";
				
		// todo: ",link = ..." for link to published web view
		docString += "\n\n"
	//}	

	/*
	if (optionSectionLevel == 2) {
		docString += "== "; 
		docString += "Elementer";
		docString += "\n";
	}
	*/

	//topLevelElms = cView_getTopLevelElementsOf(view, elms, rels);
	topLevelElms = cView_getTopLevelElementsOf(view);
	
	
	topLevelElms.each(function(e) {
		
		docString += cView_documentElementHiearchy(view, e, optionSectionLevel);
	});	
	
	cView_saveViewPageToFile(view, docString);
	
	//console.log(docString);
	
	return docString;
}


function cView_test_recFindByExt(base,ext,files,result) 
{

console.log("here");

$.fs.writeFile("c:\\gitlab\\digdir\\test.txt", "Hei");	

$.fs.readdirSync("c:\\gitlab\\digdir");

exit();
	
	
    files = files || $.fs.readdirSync(base) 
    result = result || [] 

    files.forEach( 
        function (file) {
            var newbase = $.path.join(base,file)
            if ( $.fs.statSync(newbase).isDirectory() )
            {
                result = recFindByExt(newbase,ext,$.fs.readdirSync(newbase),result)
            }
            else
            {
                if ( file.substr(-1*(ext.length+1)) == '.' + ext )
                {
                    result.push(newbase)
                } 
            }
        }
    )
    return result
}