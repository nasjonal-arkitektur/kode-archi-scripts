/*
 * c_View
 */
 
load(__DIR__ + "../common/c_Folder.ajs");
load(__DIR__ + "../common/c_Model.ajs");
load(__DIR__ + "../common/c_Collection.ajs");

var m_view = null;

function cView_GetSelectedElements() {

	return $(selection).filter("element");

/*
	$(selection).filter("element").each(function(e) {
		console.log("Selected element: " + e.name );			
	});
*/
	
}

function cView_GetRelativeRenderPath(view) {

	var path = "";

	if (const_option_antora)
		path = view.prop(const_prop_antoraViewPath);	
	else
		path = view.prop(const_prop_viewRelativeRenderPath);
	
	return path;
}

function cView_GetImagePath(view) {

	var path = "";
	
	if (const_option_antora) {
		path = cModel_GetRenderingRootPath() + "\\" + view.prop(const_prop_antoraViewImagePath);
	}
		
	else
		path = cModel_GetRenderingRootPath() + "\\" + cView_GetRelativeRenderPath(view) + "\\" + const_mediaFolderName;

	return path;
}


function cView_GetSelectedRelationship() {

	$(selection).filter("relationship").each(function(r) {
		console.log("Selected relationship: " + r.name );			
	});
	
}

function cView_GetSelectedConcepts() {


	return $(selection).filter("concept");
	
	/*
	$(selection).filter("concept").each(function(e) {
		console.log("Selected concept: " + e.name );			
	});
	*/
	
}	
	
var cView_GetElementsInView = function(v) {

	//var elements = $(v).children().filter("element");
	//return elements;
	
	var resultingItems = null;
	var viewItems = null;
	
	viewItems = $(view).find().filter("element");

	viewItems.each(function(item) {	
	
		//if (itemType == "concept")
		//	item = item.concept;
	
		if (resultingItems == null) {
			resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1)
				resultingItems.add($(item));
		}
	});
	
	return resultingItems;
}

var cView_GetRelationshipsInView = function(v) {

	var resultingItems = null;
	var viewItems = null;
	
	viewItems = $(view).find().filter("relationship");

	viewItems.each(function(item) {	
	
	
		if (resultingItems == null) {
			resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1)
				resultingItems.add($(item));
		}
	});
	
	return resultingItems;
}

var cView_GetOtherConceptsInViewWithSameName = function(vu, elm) {

    return $(vu).children().filter("element").filter(function(o) {
		
		return ( (o.name == elm.name) && ( (o.type == elm.type) && (o.concept.id != elm.concept.id)) );
	
    });
}

var cView_GetOtherOccurencesInView = function(vu, elm) {


	console.log("cView_GetOtherOccurencesInView, " + "view = " + vu.name + ", element = " + elm.name);  
	
	/*
    return $(vu).children().filter("element").filter(function(o) { // erik tbd! doesn't work for nested objects - need recursion or ...!!!!!?
		return ( o.concept.id == elm.concept.id );
	*/
	
	return $("element").filter(function(o) { 
		if (o.view == vu)
			return ( o.concept.id == elm.concept.id );
		else
			return null;
	
    });
}

var cView_MergeWithDuplicateElementsInView = function(v) {

	window.prompt("cView_MergeWithDuplicateElementsInView yet to be implemented!? Exiting...");
	exit();

	var elements = $(v).children().filter("element");
	return elements;
}

function cView_GetCurrentLanguage(view) {	
	return view.prop(const_prop_language);
}

function cView_SetCurrentLanguage(view, language) {
	// assume valid language
	
	view.prop(const_prop_current_language, language);
	

}

function cView_CreateMissingProperty(view, propName, propValue) {

	if ( view.prop(propName) === null ) {
		console.log(". Creating missing or empty standard property " + propName + " for " + view.name );
		view.prop(propName, propValue);
	}
}	

function cView_createMissingProperties(view) {

			
		//view.removeProp(const_prop_default_language); // very very temporary!
		//view.removeProp(const_prop_current_language); // very very temporary!
		//CreateMissingProperty(view, const_prop_default_language, const_prop_language_value_no);
		//CreateMissingProperty(view, const_prop_current_language, const_prop_language_value_no);
		
		
		//cView_CreateMissingProperty(view, const_prop_metaLevel, const_prop_metaLevel_value_default);
		cView_CreateMissingProperty(view, const_prop_language, cModel_GetCurrentLanguage() );
		
		if (cModel_GetCurrentLanguage() === "no") {
			cView_CreateMissingProperty(view, const_prop_name_no, view.name );
			cView_CreateMissingProperty(view, const_prop_name_en, "" );
			cView_CreateMissingProperty(view, const_prop_description_no, view.documentation );
			cView_CreateMissingProperty(view, const_prop_description_en, "" );
		}
		else if (cModel_GetCurrentLanguage() === "en") {
			cView_CreateMissingProperty(view, const_prop_name_no, "" );
			cView_CreateMissingProperty(view, const_prop_name_en, view.name );
			cView_CreateMissingProperty(view, const_prop_description_no, "" );
			cView_CreateMissingProperty(view, const_prop_description_en, view.documentation );
		}
			
		if (const_option_antora)
		{
			cView_CreateMissingProperty(view, const_prop_antoraViewPath, "");
			cView_CreateMissingProperty(view, const_prop_antoraViewImagePath, "");
		}
		else
			cView_CreateMissingProperty(view, const_prop_viewRelativeRenderPath, "");	
}

function cView_getOutgoingElementRelations(view, element) {
	var allOutgoingElementRelations = cConcept_getOutgoingRelations(element.concept);
	var viewOutgoingElementRelations = allOutgoingRelations;
	
	
}



function cView_asciidocTemplateHeader(view) {
		
	var docString = "";
	var templateheader = 
	/*
	"////" + "\n" +
	"Guide to the below header attributes:" + "\n\n" +

	"    lang: en; no" + "\n" +
	"    difi_orig_language: en; no" + "\n" +
	"    difi_translation_status: -; missing; incomplete; OK " + "\n" +
	"    keywords_en: comma separated list of english keywords (no controlled vocabulary); TBD" + "\n" +
	"    keywords_no: comma separated list of Norwegian keywords (no controlled vocabulary); TBD  " + "\n\n" +
		
	"Note: The _lang_ value may be overridden by a command line parameter." + "\n" +
	"////" + "\n\n" +
	*/
	":lang: no" + "\n" +
	":difi_orig_language: no" + "\n" +
	":doctitle_en: English Document Title" + "\n" +
	":doctitle_no: " + view.name + "\n" + // Erik: Todo - pick it from the attribute...
	":difi_translation_status: -" + "\n" +
	":keywords_en: TBD" + "\n" +
	":keywords_no: TBD" + "\n" +
	":toclevels: 3" + "\n" +
	":difi_doctype: Basic Book Template" + "\n\n" +
	":toc: left" + "\n" +
	":sectnums:" + "\n";

	/*
	"// The above parameters are processed by scripts included by the following statement" + "\n" +
	"include::../plattform_felles/includes/commonincludes.adoc[]" + "\n\n";
	*/

	docString += templateheader;
	return docString;
}

function cView_getTopLevelElementsOf(elms, rels) {

	var topLevelElements = null;
	
	elms.each(function(e) {

		var doesCompose = false;
		var isTopLevel = true;

		rels.each(function(r) {
		
			if (r.type == "composition-relationship"  && r.source.name == e.name) {
				doesCompose = true;
				console.log(e.name + " does compose");
				//break;
			}
		});

		if (doesCompose) {
				
			rels.each(function(r) {
				if (r.type == "composition-relationship" && r.target.name == e.name) {
					isTopLevel = false;
					console.log(e.name + " is NOT TopLevel");
					//break;
				}			
			});			
		}
		else
			isTopLevel = false;
		
		if (isTopLevel) {
			
			
			if (topLevelElements == null) {
				topLevelElements = $(e);
			}
			else {
				topLevelElements.add($(e));
			}
			
		}
		
	});
	
	console.log("\n" + "Done:");
	for (i = 0; i < topLevelElements.length; i++) {
		console.log(topLevelElements[i].name);
	}	
	
	return topLevelElements;
}

function cView_documentViewAsAsciidocChapters(view) {

	// input: var view = CSelection_GetTheSelectedView();

	var docString = "";
	docString += cView_asciidocTemplateHeader(view);


	// main chapter caption
	docString += "== "; // erik: how to evaluate chapter level?
	docString += view.name;
	docString += "\n";
	
	// view description
	docString += "\n";
	docString += view.documentation;
	docString += "\n\n";


	// image of the archi view
	if ( cModel_GetRenderingRootPath() && cView_GetRelativeRenderPath(view) ) {
		
		docString += "." + view.name;
		renderingpath = cModel_GetRenderingRootPath() + "\\" + cView_GetRelativeRenderPath(view);
		docString += "\nimage::../" +  cView_GetRelativeRenderPath(view) + "/media/" + view.name + ".png" + "[alt=" + view.name + " image]";
		// todo: ",link = ..." for link to published web view
	}

	
	
	var elms = cView_GetElementsInView(view);
	var rels = cView_GetRelationshipsInView(view);
	var renderingpath = "";
	
	var cnt = 0;
	while (elms.size() > 0) {

		console.log("\n" + "Before:");
		elms.each(function(e) {
			console.log(e.name);
		});

		doneElms = cView_getTopLevelElementsOf(elms, rels);
		elms = elms.not(doneElms);
		
		console.log("\n" + "doneElms:");		
		doneElms.each(function(e) {
			console.log(e.name);
		});	
		
		
		console.log("\n" + "After:");		
		elms.each(function(e) {
			console.log(e.name);
		});	

		if (++cnt > 0)
			exit();
	
		
	}
	
	return docString;
}