/*
 * c_Filesystem.ajs
 */

function cFilesystem_getSubDirs(dirPath) {
	
	
	//console.log("cFilesystem_getSubDirs(" + dirPath + ")");
	
	var resultList = [];
	
	var File = Java.type("java.io.File");
	var dir = new File(dirPath);

	var list = dir.list();
	if (list == null) {
		window.alert("Null... empty dir???");
		console.log("null");
		exit();
	}
	
	var i;
	for (i = 0; i < list.length; i++) {

		var file = new File(dirPath + "\\" + list[i]);
		if (file.isDirectory()) {
			if (file.getName() != ".git")
				resultList.push(file.getName());
		}
    }
	
	return resultList;
	
	
}

function cFilesystem_AddSubPath(aPath, aSubPath) {
	
	var completePath = aPath + aSubPath;
	completePath = completePath.replace("\\\\", "\\");

	return completePath;
}

function cFilesystem_CleanupPath(aPath) {
	
	var path = aPath.replace("\\\\", "\\");

	return path;
}

function cFilesystem_getDirsWithFile(rootPath, fileName) {

	var resultList = [];

	var File = Java.type("java.io.File");
	var Path = Java.type("java.io.File");
	var path = new Path(rootPath);

	if (!path.isDirectory()) {
		window.alert("Error: " + rootPath + " is not a directory.");
		exit();
	}
	
	var dir = new File(rootPath);
	var list = dir.list();
	if (list == null) {
		window.alert("Null... empty dir???");
		console.log("null");
		exit();
	}
	
	var i;
	for (i = 0; i < list.length; i++) {
		var path = rootPath + "\\" + list[i];
		var file = new File(path);
		if (!file.isDirectory()) {
			//console.log("File: " + file.getName());
			if (file.getName() === fileName) {
				resultList.push(rootPath);
			}
		}
    }
	
	for (i = 0; i < list.length; i++) {

		var file = new File(rootPath + "\\" + list[i]);
		if (file.isDirectory()) {
			
			if (file.getName() != ".git") {
				//console.log("Dir: " + file.getName());
				
				var fullPath = rootPath + "\\" + file.getName();
				fullPath = cFilesystem_CleanupPath(fullPath);

				//console.log("Drilldown to dir " + fullPath);
				
				var subList = cFilesystem_getDirsWithFile(fullPath, fileName);
				resultList = resultList.concat(subList);
				
			}

		}
    }
	
	//console.log("resultList.length = " + resultList.length);
	return resultList; 
}

function cFilesystem_listFiles(filePath) {

	var File = Java.type("java.io.File");
	//var theFile = new FileReader(filePath);
	//var File = Java.type("java.io.File");
	
	var Path = Java.type("java.io.File");
	var path = new Path(filePath);
	//console.log("path.getName = " + path.getName());
	


	if (!path.isDirectory()) {
		window.alert("Error: " + filePath + " is not a directory.");
		exit();
	}
	
	var dir = new File(filePath);
	//console.log("File.getName = " + dir.getName());
	
	var list = dir.list();
	if (list == null) {
		window.alert("Null... empty dir???");
		console.log("null");
		return null;
	}
	
		
	var i;
	for (i = 0; i < list.length; i++) {

		var file = new File(filePath + "\\" + list[i]);
		if (file.isDirectory()) {
			console.log("Dir: " + file.getName());
			
			var fullPath = filePath + "\\" + file.getName();
			console.log("Drilldown to dir " + fullPath);
			cFilesystem_listFiles(fullPath );
			
			/*
			if (dirs == null) {
				dirs = $(file);
			}
			else {
				dirs.add($(file));
			}
			*/
		}
 		else {
			console.log("File: " + file.getName());
			
		
		}
			
    }
	
	return true; // ??
}

function cFilesystem_mkDirIfNotExisting(dirPath) {
	//console.log("cFilesystem_createDir " + dirPath);
	var File = Java.type("java.io.File");
	
	var f = new File(dirPath); 

	f.mkdir(); // will return null if the dir already exists
}


function cFilesystem_writeTextFile(filePath, txt) {
	//console.log("cFilesystem_writeTextFile");
	$.fs.writeFile(filePath, txt);
}

function cFilesystem_readTextFile(filePath) {

	console.log("cFilesystem_readTextFile");

	if (!filePath) {
		window.alert("Error: Empty filePath as input to cFilesystem_readTextFile. Exiting...");
		exit();
	}
		
		
	var FileReader = Java.type("java.io.FileReader");
	var theFile = new FileReader(filePath);

	var txt = "";

	var data = theFile.read();
	while(data != -1) {
	  var theCharacter = String.fromCharCode(data);
	  txt+=theCharacter;
	  data = theFile.read();
	}
	theFile.close();
	
	return txt;

}

/*
 public void iterate(final String dirPath) throws IOException {
    final DirectoryStream<Path> paths = Files.newDirectoryStream(Paths.get(dirPath));
    for (final Path path : paths) {
      if (Files.isDirectory(path)) {
        System.out.println(path.getFileName());
      }
    }
  }
*/

function not_cFilesystem_listFiles(filePath) {

	importClass(Packages.java.io.File);
	
	var list = File.list(filePath);
	console.log(list);

	//var dirStr = new Java.type("java.nio.DirectoryStream");	
	//new FileReader(filePath);
	
    //for (Path file: stream) {
    //    System.out.println(file.getFileName());
    //}

/*
    var paths = Files.newDirectoryStream(Paths.get(dirPath));
    for (final Path path : paths) {
      if (Files.isDirectory(path)) {
        console.log(path.getFileName());
      }
    }
*/
}


function cFilesystem_listFilesWithExtension(filePath, ext) {

	var nioFile = Java.type("java.nio.file.FileVisitResult");
	var Files = Java.type("java.nio.file.FileVisitResult");	
	//var result = Files.walkFileTree(filePath, ext);
	//console.log(result);
	
}




function cFilesystem_test_recFindByExt(base,ext,files,result) // erik: just starting to experiment with parsing files in jacascript
{

	var filePath = "c:\\gitlab\\digdir\\test.txt";
	if (filePath) {
	  var FileReader = Java.type("java.io.FileReader");
	  var theCSVFile = new FileReader(filePath);

	  var theCSV ="";

	  var data = theCSVFile.read();
	  console.log("> Please Wait...");
	  while(data != -1) {
		  var theCharacter = String.fromCharCode(data);
		  theCSV+=theCharacter;
		  data = theCSVFile.read();
	  }
	  theCSVFile.close();
	  console.log("> File Loaded");
	  //theDataFile = Papa.parse(theCSV);
	  //console.log("> File Parced");

	  //theData = theDataFile.data;
	  console.log("theCSV:\n" + theCSV);
	  
	}

/*
$.fs.readFile("c:\\gitlab\\digdir\\test.txt", function(err, data) {
	window.alert(data);
});

fs.readFile('demofile1.html', function(err, data) {
    res.writeHead(200, {'Content-Type': 'text/html'});
    res.write(data);
    return res.end();
  });
  */
exit();

$.fs.readdirSync("c:\\gitlab\\digdir");

    files = files || $.fs.readdirSync(base) 
    result = result || [] 

exit();
	
	
    files = files || $.fs.readdirSync(base) 
    result = result || [] 

    files.forEach( 
        function (file) {
            var newbase = $.path.join(base,file)
            if ( $.fs.statSync(newbase).isDirectory() )
            {
                result = recFindByExt(newbase,ext,$.fs.readdirSync(newbase),result)
            }
            else
            {
                if ( file.substr(-1*(ext.length+1)) == '.' + ext )
                {
                    result.push(newbase)
                } 
            }
        }
    )
    return result;
}

