/*
/*
 * c_concept
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");


function cConcept_removeProperty(concept, propName) { 

	concept.removeProp(propName);
}

function cConcept_GetProperties(concept) {  // maybe not needed, but keep it to show...
	
	var propList = $(concept).prop();
 	/* .each not working here!?
	propList.each(function(p) {
		console.log(p);
	});	
	*/
	
	console.log("\nProperties:");
	for (var i = 0; i < propList.size(); i++) {
		console.log(propList[i] + ": " + concept.prop( propList[i]) );
	}
	
	return propList;
}

function cConcept_getRelations(concept) { 

	var relations = $(concept).rels();
	
	/* works
	relations.each(function(r) {
		console.log(r);
	});	
	*/

	return relations;
}

function cConcept_getOutgoingRelations(concept) { 

	return $(concept).outRels();
}

function cConcept_getIncomingRelations(concept) { 

	return $(concept).inRels();
}


function cConcept_HasProperty(concept, propertyName)
{

	if ( concept.prop(propertyName) === null )
		return true;
	/*
	var propList = concept.prop();
	for (var i = 0; i < propList.size(); i++) {
		
		if (propList[i] == propertyName)
			return true;
	}	
	*/

	return false;
}

function cConcept_HasRelation(concept, otherRelation)
{
//console.log("\ncConcept_HasRelation," + concept.name );	
	var thisConcept = concept.concept; // just to make 100% sure we're dealing with the concept object and not an occurence
	
	var result = false;
	
	var rels= cConcept_getRelations(thisConcept);
	rels.each(function(r) {
		
		var thisSource = $(r).sourceEnds();
		thisSource = thisSource.first();
		var otherSource = $(otherRelation).sourceEnds();
		otherSource = otherSource.first();

		var thisTarget = $(r).targetEnds();
		thisTarget = thisTarget.first();	
		var otherTarget = $(otherRelation).targetEnds();
		otherTarget = otherTarget.first();

		if (thisSource.name === otherSource.name && thisTarget.name === otherTarget.name) {
			//console.log(thisSource.name + ": Same source and target");	

			if (r.name === otherRelation.name && r.type === otherRelation.type) {
				//console.log(thisSource.name + ": Same name and type");
				result = true;
			}
				
		}		
	});		

	
	return result;
}


function cConcept_AddOtherRelation(thisConcept, otherConcept, otherRelation) { 
	console.log("cConcept_AddOtherRelation(" + thisConcept + ", " + otherConcept + ", " + otherRelation + ")" );

	var newRelation = null;
	
	var source = $(otherRelation).sourceEnds();
	source = source.first();
	var target = $(otherRelation).targetEnds();
	target = target.first();
	
	if (source == null) {
		console.log("Error: source = 0, exiting...");
		exit();
	}
		


	console.log("source: " + source.id);
	console.log("target: " + target.id);
	
	
	//model.createRelationship(relationship-type, name, source, target);
	
	if (source.id == otherConcept.id)
		source = thisConcept;
	if (target.id == otherConcept.id)
		target = thisConcept;

	console.log("source: " + source.id);
	console.log("target: " + target.id);
	
	var hasRelation = cConcept_HasRelation(thisConcept, otherRelation);
console.log(hasRelation);
	
	if (!hasRelation) {
		newRelation = model.createRelationship(otherRelation.type, otherRelation.name, source, target); // default folder
		console.log("New Relation created");
	}
	return newRelation;

}

function cConcept_MergeWithMasterConcept(conceptToReplace, masterConcept) {


		//debug?(console.log("Merging concept " + conceptToReplace.name + ", id = " + conceptToReplace.id + " with " + masterConcept.name + ", id = " + masterConcept.id) ):true;
		console.log("Merging concept " + conceptToReplace.name + ", id = " + conceptToReplace.id + " with " + masterConcept.name + ", id = " + masterConcept.id);

		var occurencesToFix = $(conceptToReplace).objectRefs();
		occurencesToFix.each(function(o) {
			
			var view = cElement_GetView(o);
				if (view != null) {
				console.log("\n" + o.name + ": Merging " + o.name + ", id = " + o.id + " in view " + view + " with masterConcept id = " + masterConcept.id );
			
				var newViewObj = view.add(masterConcept, o.bounds.x, o.bounds.y, o.bounds.width, o.bounds.height); 
				o.delete(); // delete each replaced occurence
			}
						
		});	
		
		// before deleting the conceptToReplace, merge the attributes and connections
		// TBD: ask user first????
		
		// merge attributes
		var propsOfconceptToReplace = conceptToReplace.prop();
		for (var i = 0; i < propsOfconceptToReplace.size(); i++) {
			
			if (!cConcept_HasProperty(masterConcept, propsOfconceptToReplace[i]) )
				masterConcept.prop(propsOfconceptToReplace[i], conceptToReplace.prop( propsOfconceptToReplace[i]));
		}	

		// merge connections
		var relationsOfconceptToReplace = cConcept_getRelations(conceptToReplace);
		relationsOfconceptToReplace.each(function(r) {
			
			newR = cConcept_AddOtherRelation(masterConcept, conceptToReplace, r);
			
		});	
		
		// consider enhancement: show the newly created relations if the corresponding old ones were shown...
		//      ... will need to iterate tgroug all views and getDiagramComponents prior to deleting the occurences above
		
		conceptToReplace.delete(); // finally delete the replaced concept

}



function cConcept_getRelations(concept) { 

	var relations = $(concept).rels();
	
	/* works
	relations.each(function(r) {
		console.log(r);
	});	
	*/

	return relations;
}


function cConcept_SetProperty(concept, propName, propvalue) {
	
	concept.prop(propName, propvalue);
}


function cConcept_SetName(concept, name) {
	
	concept.name = name;
}

function cConcept_SetDescription(concept, description) {
	concept.documentation = description;
}

function cConcept_GetProperty(concept, propName) {
	
	//if (!cConcept_HasProperty(concept, propertyName) )
	//	return false;
	
	var propValue = concept.prop(propName);

//console.log("cConcept_GetProperty propValue = ", propValue);

	return propValue;
}

function cConcept_SetLanguage(concept, language) {
	
	// 1. set the name
	var localizedName = null;
	var localizedDescription = null;
	var propName = null;
	var propDescr = null;
	

	if (language === const_prop_language_value_no) {	
		propName = const_prop_name_no;
		propDescr = const_prop_description_no;
	}
	else if (language === const_prop_language_value_en) {	
		propName = const_prop_name_en;
		propDescr = const_prop_description_en;
	}
	else {
		console.log("Error: Invalid language '" + language + "'" + ". Exiting...");
	}
	

	localizedName = cConcept_GetProperty(concept, propName);


	if (localizedName === "" || localizedName === null ) {
		//console.log("Warning: cannot set name(" + concept.name + ") to language '" + language + "', due to blank property " + propName);// + ". Exiting...");
		
		
		// Keep the name as it is...
		localizedName = concept.name; 
		
		
		//... and fix the blank property
		
			
		
		
		if(cModel_GetCurrentLanguage() == const_prop_language_value_no) {
			cConcept_SetProperty(concept, const_prop_name_no, concept.name);
		}
		else if (cModel_GetCurrentLanguage() == const_prop_language_value_en) {
			cConcept_SetProperty(concept, const_prop_name_en, concept.name);
		}
		console.log("Info: Blank name property updated according to the model's current language;"); 
		
	}
	else
		cConcept_SetProperty(concept, const_prop_language, language); // update the language property of the concept, provided the name exists in this language
	
	
	
	
	cConcept_SetName(concept, localizedName);
	
	
	
	

	localizedDescription = cConcept_GetProperty(concept, propDescr);
	if (localizedDescription === "" || localizedDescription === null ) {
		localizedDescription = concept.documentation; // just keep it
		
		//... and fix the blank property
		
		if(cModel_GetCurrentLanguage() == const_prop_language_value_no) {
			cConcept_SetProperty(concept, const_prop_description_no, concept.documentation);
		}
		else if (cModel_GetCurrentLanguage() == const_prop_language_value_en) {
			cConcept_SetProperty(concept, const_prop_description_en, concept.documentation);
		}
		console.log("Info: Blank description property updated according to the model's current language;"); 		
		
		
	}
	cConcept_SetDescription(concept, localizedDescription);
	

	
	
	
	// 3. update label
	cConcept_UpdateLabel(concept);

}


function cConcept_RemoveNamespaceFromName(concept) {

		var namespaceValue = concept.prop(const_prop_namespace);
		var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
		
		console.log("Removing " + namespaceWithPreAndPostfix + " from displayed name of " + concept.name);
		
		// TODO: replace code by calling cNamespace_GetNameOfConceptWithoutNamespace!

		if (concept.namespaceValue != "") // also test for null?
		{
			var startPos = concept.name.indexOf(const_title_namespace_prefix);
			if (startPos >= 0) {
			
				var restOfString = concept.name.substring(startPos);
				var endPos = restOfString.indexOf(const_title_namespace_postfix);
				
				if (endPos >= 0) {
				
					var strToReplace = restOfString.substring(0, endPos + 1);
					//console.log("strToReplace = " + strToReplace); // temptest

					concept.name = concept.name.replace(strToReplace, "");	
				}
			}
		}	
		
		return concept.name;
}


function cConcept_AddNamespaceToName(concept) {

		var namespaceValue = concept.prop(const_prop_namespace);

		if (concept.namespaceValue != "") {
			concept.name = cConcept_RemoveNamespaceFromName(concept);
			
			var namespaceWithPreAndPostfix = const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;;
			
			console.log("Adding " + namespaceWithPreAndPostfix + " to displayed name of " + concept.name);
			//concept.name += const_title_namespace_prefix + namespaceValue + const_title_namespace_postfix;
			concept.name += namespaceWithPreAndPostfix;
		}
}

function cConcept_OKToSwitchType(concept, newType) {  // NOTE: IN WORK**************************

console.log("cConcept_OKToSwitchType for " + concept.name + " from " + concept.type + " to " + newType);

	// check all the relations to verify they will be valid with the new type
	
	var thisConcept = concept.concept; // just to make 100% sure we're dealing with the concept object and not an occurence
	//isAllowedRelationship(relationship-type, source-concept-type, target-concept-type)
	
	//var relations = cConcept_getRelations(concept);
	
	var outRels = cConcept_getOutgoingRelations(thisConcept);
	var inRels = cConcept_getIncomingRelations(thisConcept);
	
	//console.log("outRels.size = " + outRels.size() );
	//console.log("inRels.size = " + inRels.size() );
	
	var i = 0;
	
	outRels.each(function(r) {
		var target = $(r).targetEnds();
		target = target.first();
			
		var allowedOut = ($.model).isAllowedRelationship(r.type, thisConcept.type, target.type );
		
		if (!allowedOut) {
			i++;
			console.log("Error: Invalid relation " + r.type + " from " +  newType + " (" + thisConcept.name + " )" + " to " +  target.type + " (" + target.name + " )" );
		}
	});	

	
	inRels.each(function(r) {
		var source = $(r).sourceEnds();
		source = source.first();
		
		var allowedIn = ($.model).isAllowedRelationship(r.type, source.type, thisConcept.type );
		if (!allowedIn) {
			i++;
			console.log("Error: Invalid relation " + r.type + " from " + source.type + " ( " + source.name + ") to " + newType + " (" + thisConcept.name + " )" );
		} 
	});
	
	return i;

}

function concept_isExtension(concept) {
	
	if (!cConcept_HasProperty(concept, const_prop_dct_type) ) {
		
		// property is missing - just fix it, assuming the default value
		console.log("Info: Missing property for dct:type se to standard archi type=" + const_prop_dctType_archi_prefix + concept.type);
		cConcept_CreateMissingProperty(concept, const_prop_dct_type, const_prop_dctType_archi_prefix + concept.type);
		
	}

	var dctType = cConcept_GetProperty(concept, const_prop_dct_type);
	var standardArchiType = null;
	
	if (dctType.substr(0, const_prop_dctType_archi_prefix.length) === const_prop_dctType_archi_prefix) {
		standardArchiType = dctType.substr(const_prop_dctType_archi_prefix.length, dctType.length - 1);
	
		//console.log("standardArchiType=" + standardArchiType);
	
		if (standardArchiType === concept.type) 
			return false;
	}
		
	// not a standard archi type
	
	return true;
}


function concept_NameForCurrentModelLanguageMissing(concept) {
	
	result = false;
	
	if(cModel_GetCurrentLanguage() == const_prop_language_value_no) {
		
		if (cConcept_GetProperty(concept, const_prop_name_no) === "")
			result = true;
	}
	else if(cModel_GetCurrentLanguage() == const_prop_language_value_en) {
		
		if (cConcept_GetProperty(concept, const_prop_name_en) === "")
			result = true;
	}
	
	return result;

}

function cConcept_GetCurrentLanguage(concept) {	

	var currLang = concept.prop(const_prop_language);
	if (!currLang)
		currLang = cModel_GetCurrentLanguage();
		
	return currLang;
}

function cConcept_EvaluateLanguageOfName(concept) {
	
	language = "";

	if (concept.name === cConcept_GetProperty(concept, const_prop_name_en))
		language = const_prop_language_value_en;
	
	else if (concept.name === cConcept_GetProperty(concept, const_prop_name_no))
		language = const_prop_language_value_no;
	
	return language;
	
}

function concept_nameEqualsNameOfCurrentLanguage(concept) {
	
	result = false;

	
	if (cConcept_GetCurrentLanguage(concept) == const_prop_language_value_en) {
		if (concept.name === cConcept_GetProperty(concept, const_prop_name_en))
			result = true;
	}
	
	
	if (!result &&  (cConcept_GetCurrentLanguage(concept) == const_prop_language_value_no)) {
		if (concept.name === cConcept_GetProperty(concept, const_prop_name_no))
			result = true;
	}
	
	// override by view level setting??????????	

	
	// override by model level setting
	if (!result &&  (cModel_GetCurrentLanguage() == const_prop_language_value_no)) {
		
		if (concept.name === cConcept_GetProperty(concept, const_prop_name_no))
			result = true;
	}
	if (!result &&  (cModel_GetCurrentLanguage() == const_prop_language_value_en)) {
		
		if (concept.name === cConcept_GetProperty(concept, const_prop_name_en))
			result = true;
	}
	
	return result;

}


function cConcept_EvaluateLabel(concept, option_caseForShowingparentConceptType, option_caseForShowingname, option_caseForShowingNamespace, option_caseForShowingConceptType, option_caseForShowingLanguage ) {

	var label = "${name}";
	var doShowNamespace = false;
	var doShowType = false;
	var doShowLanguage = false;

	if (option_caseForShowingNamespace === "always")
		doShowNamespace = true;
	else if (option_caseForShowingNamespace === "duplicateNames") {
		
		// note:the first parameter in the following call originally meant to be occurence. Also works for concept...
		var others = cModel_OtherConceptsWithSameNameandType(concept, false, false); // caseSensitive, namespaceSensitive
		
		if (others.size() > 0 ) 
			doShowNamespace = true;
	}
	if (option_caseForShowingConceptType === "always")
		doShowType= true;
	else if (option_caseForShowingConceptType === "extensions") {
		if (concept_isExtension(concept))
			doShowType= true;
	}
	

	if (option_caseForShowingLanguage === "always")
		doShowLanguage = true;
	else if (option_caseForShowingLanguage === "missingCurrentLanguage")
		if (concept.name != "") {
			if (!concept_nameEqualsNameOfCurrentLanguage(concept))  //unneccessay test? See below...
			//if (concept_NameForCurrentModelLanguageMissing(concept) )
				doShowLanguage= true;
		}
	if (doShowNamespace)
		label += " [ns:${property:difi:namespace}]";	// const_prop_namespace
	
	
	
	if (doShowLanguage){

		var supposedCurrentLanguage = cConcept_GetCurrentLanguage(concept);
console.log("supposedCurrentLanguage " + supposedCurrentLanguage);
		var actualLanguage = cConcept_EvaluateLanguageOfName(concept);
console.log("actualLanguage " + actualLanguage);		
		if (actualLanguage != supposedCurrentLanguage) {
			languageToIndicate = actualLanguage;		
		
			//label += " [lang:${property:difi:language}]"; // const_prop_language
			label += " [lang:" + languageToIndicate + "]";
	
		}
	}
			
	if (doShowType)
		label += "\n<<${property:dct:type}>>"; // const_prop_dct_type
	
	return label;
}

function cConcept_RenameProperty(concept, propName, newName) {
	
	if (concept.prop(propName) && (propName != newName) ) { // only if the property is used
		concept.prop(newName, concept.prop(propName)); //create new
		cConcept_removeProperty(concept, propName); // remove old
	}
}

function cConcept_CreateMissingProperty(concept, propName, propValue) {

	if ( cConcept_HasProperty(concept, propName)  ) {
		console.log(". Creating missing or empty standard property " + propName + "=" + propValue + " for " + concept.type  + " " + concept.name );
		concept.prop(propName, propValue);
	}
}

function cConcept_CreateMissingProperties(concept) {


//cConcept_removeProperty(concept, const_prop_dct_type); // very very temporary!
	
	cConcept_CreateMissingProperty(concept, const_prop_archi_guid, concept.id);
		
	cConcept_CreateMissingProperty(concept, const_prop_metaLevel, const_prop_metaLevel_value_default);
	cConcept_CreateMissingProperty(concept, const_prop_dct_type, const_prop_dctType_archi_prefix + concept.type);
	cConcept_CreateMissingProperty(concept, const_prop_namespace, const_prop_namespace_value_default);
	cConcept_CreateMissingProperty(concept, const_prop_abstractionLevel, const_prop_abstractionLevel_value_default);

	cConcept_CreateMissingProperty(concept, const_prop_link1, const_prop_link1_value_default);
	cConcept_CreateMissingProperty(concept, const_prop_logo, const_prop_logo_value_default);
		

	cConcept_CreateMissingProperty(concept, const_prop_language, cModel_GetCurrentLanguage() );
	
	/*
	if (concept.name === null || concept.name === "") {
		concept.name = concept.type;
		
		//Note: Assuming no element concepts have "-relationship" as part of the name...but should check type first...!!! erik
		
		concept.name = concept.name.replace("-relationship", ""); // remove this part of the name (applies for relationship conceps only)
	}
	*/


	 if (!cModel_GetCurrentLanguage() ) {
		 
		cModel_createMissingProperties();
	 }

	
	if (cModel_GetCurrentLanguage() === "no") {
		cConcept_CreateMissingProperty(concept, const_prop_name_no, concept.name );
		
		// TODO: cConcept_CreateMissingProperty(concept, const_prop_origname, concept.name );

		cConcept_CreateMissingProperty(concept, const_prop_name_en, "" );
		cConcept_CreateMissingProperty(concept, const_prop_description_no, concept.documentation );
		cConcept_CreateMissingProperty(concept, const_prop_description_en, "" );
	}
	else if (cModel_GetCurrentLanguage() === "en") {
		cConcept_CreateMissingProperty(concept, const_prop_name_no, "" );
		cConcept_CreateMissingProperty(concept, const_prop_name_en, concept.name );
		cConcept_CreateMissingProperty(concept, const_prop_description_no, "" );
		cConcept_CreateMissingProperty(concept, const_prop_description_en, concept.documentation );
	}

	
	
	
	//cConcept_CreateMissingProperty(concept, const_prop_link1, "");

	
	//cConcept_CreateMissingProperty(concept, const_prop_name_to_display, "");
	
	var caseForShowingparentConceptType = default_option_caseForShowingparentConceptType;
	var caseForShowingname = default_option_caseForShowingname;
	var caseForShowingNamespace = default_option_caseForShowingNamespace;
	var caseForShowingConceptType = default_option_caseForShowingConceptType;
	var caseForShowingLanguage = default_option_caseForShowingLanguage;

	cConcept_CreateMissingProperty(concept, const_prop_label, cConcept_EvaluateLabel(concept, caseForShowingparentConceptType, caseForShowingname, caseForShowingNamespace, caseForShowingConceptType, caseForShowingLanguage));
	
	// The following necessary? Move to CRelation!!?
	var defaultRelationName = concept.type.replace("-relationship", ""); 
	if (concept.name === defaultRelationName) {
		concept.name = "";
	}
	
	cConcept_CreateMissingProperty(concept, const_prop_notes, "" );


	
	//
	if ( cConcept_GetProperty(concept, const_prop_label) === "" || cConcept_GetProperty(concept, const_prop_label) === null) {
		cConcept_UpdateLabel(concept);
	}
	
}


function cConcept_compareConceptTypeWithCustomArchiExtension(concept, customArchiExtension) {
	
	// note that we need to renove the "archi:" prefix of the customArchiExtension before comparing strings
	
	if (concept.type === customArchiExtension.substr(const_prop_dctType_archi_prefix.length, customArchiExtension.length - 1))
		return true;
	else
		return false;
}
	
function cConcept_VerifyExtensionType(concept) {

	// assume property const_prop_dct_typeis present; see cConcept_ValidateConceptType (calling this function)
	

	var dctType = cConcept_GetProperty(concept, const_prop_dct_type);
	var result = true;

	switch (dctType) {
		
		/*
		*	Relationships
		*/		
		
		case const_conceptType_association__synonym:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_association))
				result = false;
			break;

		
		/*
		*	Elements
		*/
		
		case const_conceptType_resource__reference_arhitecture:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_resource))
				result = false;
			break;
			
		case const_conceptType_business_object__term:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_business_object))
				result = false;
			break;
			
			
		// risk/security related extensions
		case const_conceptType_grouping__risk_security_domain:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_grouping))
				result = false;
			break;
		case const_conceptType_assessment__risk:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_assessment))
				result = false;
			break;
		case const_conceptType_business_actor__threat_agent:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_business_actor))
				result = false;
			break;
		case const_conceptType_assessment__vulnerability:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_assessment))
				result = false;
			break;
		case const_conceptType_business_event__threat_event:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_business_event))
				result = false;
			break;
		case const_conceptType_business_event__loss_event:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_business_event))
				result = false;
			break;

		//	case const_conceptType_threat:
		//	case const_conceptType_business_event__attack_event:
		case const_conceptType_driver__risk_security_driverrisk_security_driver:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_driver))
				result = false;
			break;
		case const_conceptType_goal__risk_control_objective:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_goal))
				result = false;
			break;
		case const_conceptType_goal__security_control_objective:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_goal))
				result = false;
			break;
		case const_conceptType_requirement__security_requirement:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_requirement))
				result = false;
			break;
		case const_conceptType_requirement__control_measure:
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_asseconst_conceptType_requirementssment))
				result = false;
			break;
		case const_conceptType_principle__security_principle:		
			if (!cConcept_compareConceptTypeWithCustomArchiExtension(concept, const_conceptType_principle))
				result = false;
			break;

	}
	
	return result;
}



function cConcept_ValidateConceptType(concept) {


	//console.log("cConcept_ValidateConceptType");

	if (!cConcept_HasProperty(concept, const_prop_dct_type) ) {
		
		//console.log(concept.type + " " + concept.name + " missing property " + const_prop_dct_type);
		//return false;
		
		// property is missing - just fix it, assuming the default value
		cConcept_CreateMissingProperty(concept, const_prop_dct_type, const_prop_dctType_archi_prefix + concept.type);
		return true;
	}

	var dctType = cConcept_GetProperty(concept, const_prop_dct_type);
	var standardArchiType = null;
	
	if (dctType.substr(0, const_prop_dctType_archi_prefix.length) === const_prop_dctType_archi_prefix) {
		standardArchiType = dctType.substr(const_prop_dctType_archi_prefix.length, dctType.length - 1);
	
		//console.log("standardArchiType=" + standardArchiType);
	
		if (standardArchiType === concept.type) 
			return true;
	}
		
	// not a standard archi type, so check if it's in the list of our extensions
	for (var i=0; i<ArrayOfValidElementExtensions.length; i++) {
		if (ArrayOfValidElementExtensions[i] === dctType) {
			if (cConcept_VerifyExtensionType(concept)) // verify that the extension dct_type matches the concept.type
				return true;
		}
	}
	
	console.log("Warning: Invalid concept extension dct_type = " + dctType + " for concept with Archi concept type=" + concept.type + ", name=" + concept.name);
	return false;
	
}

function cConcept_UpdateLabel(concept, showAbstractionLevel) {
	
		var caseForShowingparentConceptType = default_option_caseForShowingparentConceptType;
		var caseForShowingname = default_option_caseForShowingname;
		var caseForShowingNamespace = default_option_caseForShowingNamespace;
		var caseForShowingConceptType = default_option_caseForShowingConceptType;
		var caseForShowingLanguage = default_option_caseForShowingLanguage;
		
		var evaluatedLabel = cConcept_EvaluateLabel(concept, caseForShowingparentConceptType, caseForShowingname, caseForShowingNamespace, caseForShowingConceptType, caseForShowingLanguage);
		concept.prop(const_prop_label, evaluatedLabel);
		
		if (showAbstractionLevel) {
			concept.prop(const_prop_label, evaluatedLabel + " [" + cConcept_GetProperty(concept, const_prop_abstractionLevel) + "]");
			//concept.fillColor = "#0000ff"; // blue
			concept.fillColor = "#ff0000"; // red
		}
		 
}

function cConcept_setLabel(concept, parentConceptType, name, namespace, language, conceptType) {

	var label = "";
	
	//if (parentConceptType)

	if (name=== true)
		label += "${name}";
	if (namespace === true)
		label += " [ns:${property:" + const_prop_namespace + "}]"; //" [ns:${property:difi:namespace}]";
	if (language === true)
		label += " [lang:${property:difi:language}]"; // const_prop_language
	if(conceptType === true)
		label += "\n<<${property:dct:type}>>"; // const_prop_dct_type
	 
	concept.prop(const_prop_label, label);
}

function cConcept_UpdateNameAndDescriptionAndLabel(concept) {
	 
	// name and description:
	cConcept_SetLanguage(concept, cModel_GetCurrentLanguage()); // sets name and description
	
	// label:
	concept.prop(const_prop_label, cConcept_EvaluateLabel(concept));

}

function cConcept_SetAbstractionLevel(concept, abstractionLevel) {
	
	if (abstractionLevel)
		concept.prop(const_prop_abstractionLevel, abstractionLevel);
	else 
		concept.prop(const_prop_abstractionLevel, const_prop_abstractionLevel_value_default);
}

function cConcept_SetmetaLevel(concept, metaLevel) {
	
	if (metaLevel)
		concept.prop(const_prop_metaLevel, metaLevel);
	else 
		concept.prop(const_prop_metaLevel, const_prop_metaLevel_value_default);
}


function cConcept_fixAssumingJustImportedFromSparxEA(concept) {

	//cConcept_CreateMissingProperty(concept, const_prop_archi_guid, concept.id);	
	cConcept_CreateMissingProperties(concept); // if missing, create the archi guid property as well as any other missing properties
	
	
	if (!concept.prop(const_prop_sparx_guid) ) // if missisng, create the sparx guid from the imported file
		cConcept_CreateMissingProperty(concept, const_prop_sparx_guid, concept.id);
	else if (concept.prop(const_prop_sparx_guid) != concept.id)  { // the sparx guid exists, but does it make sense that the value is different from the imported id?
		window.alert("UNEXPECTED: The imported concept.id = " + concept.id + " is different from the imported value of " + const_prop_sparx_guid + " = " + concept.prop(const_prop_sparx_id) + ". Exiting...");
		exit();
	}
	
	if ( concept.prop(const_prop_sparx_guid) && concept.prop(const_prop_sparx_guid) === concept.id)  // the sparx guid attribute exists and equals the concept.id, as expected
		concept.id = concept.prop(const_prop_archi_guid); // restore the original id

}

function cConcept_getSubConcepts(concpt) {
	
	var concept = concpt.concept;  // just to make sure we have the concept and not an element

	var subConcepts = null;

	var ownRels = $(concept).rels();
	ownRels.each(function(r) {
		if ((r.type == "composition-relationship"  || r.type == "aggregation-relationship") && r.source.id === concept.id) {
			
			if (subConcepts == null) {
				subConcepts = $(r.target);
			}
			else {
				subConcepts.add($(r.target));
			}
		}

	});

	return subConcepts;
}

function cConcept_isSubConceptOf(concept, superConcept) {
	
	var concpt = concept.concept;  // just to make sure we have the concept and not an element
	var superConcpt = superConcept.concept; // just to make sure we have the concept and not an element
	
	if (concpt.id === superConcpt.id)
		return false;

	//console.log("cConcept_isSubConceptOf, concept = " + concept.name + ", superConcept = " + superConcept.name);
			
		
	var result = false;
	
	var ownRels = $(concpt).rels();
	ownRels.each(function(r) {
		if ((r.type == "composition-relationship"  || r.type == "aggregation-relationship") && r.source.id === superConcpt.id) {
		
			result = true;
			return true;
	
		}

	});

	return result;
}


