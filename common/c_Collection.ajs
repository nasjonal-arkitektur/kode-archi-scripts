/*
 * c_Collection
 */
 

load(__DIR__ + "Constants.ajs");

function cCollection_sortByName(a, b) {

  if (a.name < b.name) {
    return -1;
  }
  if (a.name > b.name) {
    return 1;
  }
  return 0;
}

// Sorting function that prioritizes y position, then x position
function cCollection_sortByYThenX(a, b) {
    var boundsA = a.bounds;
    var boundsB = b.bounds;

    // First, compare by y position
    if (boundsA.y !== boundsB.y) {
        return boundsA.y - boundsB.y; // Sort by y (ascending)
    }

    // If y positions are the same, sort by x position
    return boundsA.x - boundsB.x; // Sort by x (ascending)
}

var cCollection_GetDuplicateItems = function(coll, obj) {

    return coll.filter(function(o) {
        return ( (o.name == obj.name) && (o.type == obj.type) );
    });
}

var cCollection_GetItemsWithGivenId = function(coll, obj) {

	return coll.filter(function(o) {
		return (o.id == obj.id) ;  
        
    });
}

var cCollection_GetDuplicatesInlistGivenElement = function(elm, list) {

	return list.filter(function(o) {
        return ( (o.name == elm.name) && (o.type == elm.type) );
    });
}

var cCollection_FindElementsWithNameInList = function(elementName, list) {

    return list.filter(function(o) {
        return ( (o.name == elementName) );
    });
}

var cCollection_GetItemsOfType = function(coll, type) {

    return coll.filter(function(o) {
        return ( (o.type == type) );
    });
}

var cCollection_GetItemsOfDctType = function(coll, dctType) {

    return coll.filter(function(o) {
        return ( (o.prop(const_prop_dct_type) == dctType) );
    });
}

var cCollection_GetItemsWithNamespace = function(coll, namespace){

//console.log("namespace=" + namespace);

    return coll.filter(function(o) {
        return ( o.prop(const_prop_namespace) === namespace );
    });
}

var cCollection_GetItemsWithSeqNo = function(coll, seqNo){

	const const_prop_sequenceNumber = "digdir:sequenceNumber";

    return coll.filter(function(o) {
        return ( o.prop(const_prop_sequenceNumber) == seqNo );
    });
}

var cCollection_GetItemsWithSeqNoAndNamespace = function(coll, seqNo, namespace){
	
	// note: may be more than one occurence of the same object 

console.log("cCollection_GetItemsWithSeqNoAndNamespace, " + seqNo + ", " + namespace);

	var items = cCollection_GetItemsWithSeqNo(coll, seqNo);
	
	if (items.size() > 1) {
		
		items = cCollection_GetItemsWithNamespace(items, namespace);
	}
	else if (items.size() == 0) {
		items = null;
	}

	return items;
}

var cCollection_GetItemsWithConceptId = function(coll, id){
	
	// note: may be more than one occurence of the same object 

	const const_prop_concept_id = "archi:concept_id";

    return coll.filter(function(o) {
        return ( o.prop(const_prop_concept_id) == id );
    });
}