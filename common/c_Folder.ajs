/*
 * c_Folder
 */

load(__DIR__ + "../common/c_Collection.ajs");
load(__DIR__ + "../common/c_Model.ajs");

 
//var m_folderName = null;
//var m_folder = null;

/* NO! May be more than one folder with the same name!
function cFolder_InitExistingFromName(folderName) {

	var m_folder = $("folder."+ folderName).first();
console.log("Found folder: " + m_folder);
}
*/

function cFolder_InitExistingFromArchiObj(folder) {

	m_folder = archiObj;
}

function cFolder_InitNew(name, parentObj) {


}

function cFolder_GetId() {

}

function cFolder_GetSubfolders(givenFolder) {

	//console.log("cFolder_GetSubFolders for folder: " + givenFolder.name);
	
	var descendantFolders = $(givenFolder).find().filter("folder");
	/*
	descendantFolders.each(function(f) {
		console.log("    " + givenFolder.name + " has descendant " + f.type + " (" + f.name + ")" );			
	});
	*/	
	return descendantFolders;
}

function cFolder_GetListOfSubfoldersForAGivenFolder(givenFolder) {
	
	var subfolders = $(givenFolder).find().filter("folder");
	return subfolders;
}
	 
function cFolder_GetListOfFolderAndSubfoldersForAGivenFolder(givenFolder) {
	
	var folders = $(givenFolder);
	var subfolders = $(givenFolder).find().filter("folder");
	folders.add(subfolders);
	
	return folders;
}

function cFolder_GetListOfSubfoldersForAGivenFolderList(givenFolders) {

	var folders = null;
	var subfolders = null;
	
	
	if (givenFolders.size() == 0 ) {
		//window.alert("cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList: No folders selected! Exiting...");
		//exit();
		return null;
	}
	
	givenFolders.each(function(f) {
		
		subfolders = cFolder_GetListOfSubfoldersForAGivenFolder(f);
				
				
		if (folders == null) {
			folders = subfolders;
		}
		else {
			folders.add(subfolders);
		}
			
	});
	
	return folders;
}

function cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList(givenFolders) {
	
	//console.log("cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList");	
	
	var folders = null;
	var subfolders = null;
	
	if (givenFolders.size() == 0) {
		//window.alert("cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList: No folders selected! Exiting...");
		//exit();
		return null;
	}
	
	givenFolders.each(function(f) {
		
		
		if (folders == null) {
			folders = $(f);
		}
		else
			folders.add($(f));
		
	
		subfolders = cFolder_GetListOfFolderAndSubfoldersForAGivenFolder(f);
		folders.add(subfolders);
			
	});
	

	
	return folders;
}

/***
function cFolder_GetAllViewsUnderGivenFolders(givenFolders) {
	
	var folders = cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList(givenFolders);
	var views = null;
	var fViews = null;
	
	folders.each(function(f) {
		
		fViews = $(f).find().filter("view");
		
		if (views == null) {
			views = fViews;
		}
		else
			views.add(fViews);
		
	});

	return views;
}

function cFolder_GetAllConceptsUnderGivenFolders(givenFolders) {
	
	var folders = cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList(givenFolders);
	var concepts = null;
	var fConcepts = null;
	
	folders.each(function(f) {
		
		fConcepts = $(f).find().filter("concept");
		
		if (concepts == null) {
			concepts = fViews;
		}
		else
			concepts.add(fViews);
		
	});

	return concepts;
}
***/


function cFolder_GetAllItemsUnderGivenFoldersForGivenType(givenFolders, itemType) {
	
	var folders = cFolder_GetListOfFoldersAndSubfoldersForAGivenFolderList(givenFolders);
	var items = null;
	var fItems = null;
	
	if (folders == null)
		return null;
	
	folders.each(function(folder) {
		
		fItems = $(folder).find().filter(itemType);
		
		if (items == null) {
			items = fItems;
		}
		else {
	
			items.add(fItems);
			
		}
	});

	return items;
}

function cFolder_GetAllItemsUnderGivenFoldersForGivenTypeAndName(givenFolders, itemType, itemName, completeName, caseSensitiveName) {

	//console.log("cFolder_GetAllItemsUnderGivenFoldersForGivenTypeAndName", itemType, itemName);

	var items = null;
	var itemsUnderGivenFoldersForGivenType = cFolder_GetAllItemsUnderGivenFoldersForGivenType(givenFolders, itemType);
	
	return itemsUnderGivenFoldersForGivenType.filter(function(item) {
		
		if (completeName && caseSensitiveName)
			return ( item.name == itemName ); 
		else if (completeName && !caseSensitiveName)
			item.name.toLowerCase() == itemName.toLowerCase();
		else if (!completeName && caseSensitiveName)
			return ( item.name.indexOf(itemName) >= 0 );
		else if (!completeName && !caseSensitiveName)
			return ( item.name.toLowerCase().indexOf(itemName.toLowerCase()) >= 0 ); 
		else 
			window.alert("Error in cFolder_GetAllItemsUnderGivenFoldersForGivenTypeAndName: Unexpected input");
    });

	
}

function cFolder_removeProperty(folder, propName) { 

	folder.removeProp(propName);
}


function cFolder_RenameProperty(folder, propName, newName) {
	
	if (folder.prop(propName) && (propName != newName) ) { // only if the property is used

		folder.prop(newName, folder.prop(propName));
		cFolder_removeProperty(folder, propName); // remove old
	}
}


function cFolder_CreateMissingProperty(folder, propName, propValue) {

	if ( folder.prop(propName) === null ) {
		console.log(". Creating missing or empty standard property " + propName + " for " + folder.name );
		folder.prop(propName, propValue);
	}
}	

function cFolder_createMissingProperties(folder) {

		cFolder_CreateMissingProperty(folder, const_prop_archi_guid, folder.id);		
		
		cFolder_CreateMissingProperty(folder, const_prop_language, cModel_GetCurrentLanguage() );
		
		if (cModel_GetCurrentLanguage() === "no") {
			cFolder_CreateMissingProperty(folder, const_prop_name_no, folder.name );
			cFolder_CreateMissingProperty(folder, const_prop_name_en, "" );
			cFolder_CreateMissingProperty(folder, const_prop_description_no, folder.documentation );
			cFolder_CreateMissingProperty(folder, const_prop_description_en, "" );
		}
		else if (cModel_GetCurrentLanguage() === "en") {
			cFolder_CreateMissingProperty(folder, const_prop_name_no, "" );
			cFolder_CreateMissingProperty(folder, const_prop_name_en, folder.name );
			cFolder_CreateMissingProperty(folder, const_prop_description_no, "" );
			cFolder_CreateMissingProperty(folder, const_prop_description_en, folder.documentation );
		}
	
}

function cFolder_isTopLevelFolder(folder) {
	if ($(f).parent().first().id === model.id)
		return true;
	else
		return false;
}

function cFolder_GetImmediateSubFolders(folder) {

	var folders = $(folder).children().filter("folder");
	return folders;


}

function cFolder_exportFolderAsArchiFile(folder) {
	
	// first save the entire current model to a new filename = name of the selected folder
	var sourceFile = folder.model.getPath();

	
	var model = folder.model;
	var expFileName = folder.name + ".archimate";
	var path = model.path;
	path = path.substring(0, path.lastIndexOf("\\")); //strip filename from path
	var origPath = path;
	//console.log("Model path without filename: " + path);	
	var expNameAndPath = path + "\\" + expFileName;
	


	//===	
	console.log("Saving model " + model.name + " to new file: " + expNameAndPath);	
	//===
	var actualFile = cModel_save(model, expNameAndPath);

	// open saved, set to current model  and set  model name = folder name, then save again
	model = $.model.load(actualFile).setAsCurrent(); // Load a model and set it as the current model
	newModel = model;
	cModel_SetName(model, folder.name);
	cModel_save(model);
	
	console.log("Loaded model: " + model.name + ", changed model name and saved to file " + actualFile);
	


	
	//**************
	var topFolders = cModel_GetToplevelFolders();
	var theViewsFolder = cModel_GetToplevelViewsFolder();
	
	if (theViewsFolder)
		console.log("Folder: '" + theViewsFolder.name + "' is the top level Views folder!");
	else {
		window.alert("There is no top level folder named 'Views'. Exiting...");
		exit();
	}


	if ($(folder).parent().first().id != theViewsFolder.id) // if not already a child of theViewsFolder
		theViewsFolder.add(folder);
	//$(f).parent().first().add(folder);



	topViewFolders = cFolder_GetImmediateSubFolders(theViewsFolder);
	topViewFolders.each(function(f) {
		if (f.id != folder.id)
			f.delete();
    });
	
	
	cModel_deleteUnusedConceptsAndRelationships(model);

	
	
	console.log("Reloading the source model, since it was closed");
	model = $.model.load(sourceFile).setAsCurrent(); // Load model and set it as the current model
	console.log("Finally switch source model (" + actualFile + "), since it was closed");
	//model = $.model.load(actualFile).setAsCurrent(); // Load a model and set it as the current model
	newModel.openInUI();
}