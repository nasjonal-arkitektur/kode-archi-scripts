/*
 * c_BookSection
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");
load(__DIR__ + "CBookSectionViewRef.ajs");


function cBookSection_SectionHeading(sectionName, sectionLevel) {

	var headerString = "";
	headerString += "\n";	
	
	var i;
	for (i = 0; i < sectionLevel; i++) {
		headerString += "=";
	}
	
	headerString += " ";
	headerString += sectionName;
	headerString += "\n";	
	return headerString;
}

function cBookSection_autodoc(section, sectionLevel) {
	
	// starting with the first section, recursively drilling down the hierarchy and then going to the next sibling section and so on
	
	// log:
	var indent = "";
	for (var i = 0; i < sectionLevel; i++) {
		indent += "    ";
	}
	console.log(indent + "cBookSection_autodoc, " + section.name + " (" +  section.prop(const_prop_dct_type) + ")" + ", level " + sectionLevel);
	

	var docString = "";

	if (section.type == "junction")
		return "";


	docString += cBookSection_SectionHeading(section.name, sectionLevel);
	
	
	if (section.prop(const_prop_dct_type) === const_conceptType_representation__section) {
		// always take the description drectly from the representation object
		docString += section.documentation;

	}
	
	else if (section.prop(const_prop_dct_type) === const_conceptType_representation__archimateView) {

		docString += CBookSectionViewRef_autodoc(section, sectionLevel);

	}
	
	docString += "\n\n";
	
	
	// drill down
	var firstSubSection = cBookSection_determineFirstSubSection(section);
	if (firstSubSection)
		docString += cBookSection_autodoc(firstSubSection, sectionLevel + 1);	

	// next at same level
	var nextSiblingSection = cBookSection_nextSiblingSection(section);
	if (nextSiblingSection)
		docString += cBookSection_autodoc(nextSiblingSection, sectionLevel);
	

	return docString;
}


function cBookSection_nextSiblingSection(section) {

	var outgoingAssociationRels = $(section).outRels("association-relationship");
	
	//console.log("#outgoingAssociationRels = " + outgoingAssociationRels.size());
	
	if (outgoingAssociationRels.size() === 1) {
		return outgoingAssociationRels.first().target;
	}
	else if (outgoingAssociationRels.size() === 0)
		return null;
	else {
		
		lib_Error("More than one outgoing association relation from section " + section.name + "." );
	}
}

function cBookSection_determineFirstSubSection(section) {

	var firstSubSection = null;
	var incomingAssociationRels = null;
	
	var subSections = cElement_getSubElements(section);
	if (subSections != null) {
		
		subSections.each(function(sub) {				
			var numIncomingAssociationRels = $(sub).inRels("association-relationship").size();

			
			if (numIncomingAssociationRels == 0) { // i.e. no preceeding chapter at the same hierarchy level
				firstSubSection = sub;	
				return firstSubSection;
			}				
		});
	}
	
	return firstSubSection; // null = no further subsections
	
}



function cBookSection_documentViewAsAsciidocChapters(section, view, sectionLevel) {


	var docString = "";

	// main chapter caption
	docString += "\n";
	
	var headerString = "=";
	var i;
	for (i = 0; i < sectionLevel; i++) {
		headerString += "=";
	}
	docString += headerString + " "; 
	
	docString += "Oversikt";
	// docString += " - " + view.name;
	docString += "\n";



	// view description
	docString += "\n";
	docString += view.documentation;
	docString += "\n\n";

	// save image of the archi view to file
//cView_saveViewImageToFile(view);
	
	//if (cView_GetImagePath(view)) {
		docString += "." + view.name;
		
		if (const_option_antora) {		
			docString += "\nimage::" +  view.name + ".png" + "[alt=" + view.name + " image]";
		}
		
		//cView_GetImagePath(view) + "[alt=" + view.name + " image]";
				
		// todo: ",link = ..." for link to published web view
		docString += "\n\n"
	//}	

	/*
	if (optionSectionLevel == 2) {
		docString += "== "; 
		docString += "Elementer";
		docString += "\n";
	}
	*/

	//topLevelElms = cView_getTopLevelElementsOf(view, elms, rels);
	topLevelElms = cView_getTopLevelElementsOf(view);
	
	
	topLevelElms.each(function(e) {
		
		docString += cView_documentElementHiearchy(view, e, sectionLevel);
	});	
	
	cView_saveViewPageToFile(view, docString);
	
	//console.log(docString);
	
	return docString;
}