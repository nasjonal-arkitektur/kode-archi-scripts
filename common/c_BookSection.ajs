/*
 * c_BookSection
 */
 
load(__DIR__ + "Constants.ajs");
load(__DIR__ + "c_Model.ajs");
load(__DIR__ + "c_BookSectionViewRef.ajs");

var option_promptFileSave = false;

function cBookSection_SectionHeading(sectionName, sectionLevel) {

	var docString = "=";


	var docString = "";

	var i;
	for (i = 0; i < sectionLevel; i++) {
		docString += "=";
	}

	docString += " " + sectionName + "\n";

	return docString;
}

function cBookSection_autodoc(section, sectionLevel, variant) {

//window.alert("cBookSection_autodoc, section=" + section);	



if ( (section.name.indexOf("+") !== -1)
|| (section.name.indexOf("/") !== -1)
|| (section.name.indexOf(":") !== -1)
|| (section.name.indexOf("*") !== -1)
|| (section.name.indexOf("?") !== -1)
|| (section.name.indexOf("+") !== -1) )
	lib_Error("Invalid character (+/:*?\"<>|) in module name '" + section.name + "'. ");

//if (section.name.indexOf("Delegere rettigheter til databehandler - UHF") !== -1)
//if (section.name.indexOf("Datautveksling ved oppslag") !== -1)
//	lib_Error("Test exit section = '" + section.name + "'. ");


	
	var viewDoc = "";
	var modulePath = CBookSection_determineModulePath(section);

				
	// starting with the first section, recursively drilling down the hierarchy and then going to the next sibling section and so on
	
	section = section.concept; // just to make sure
	var dctType = section.prop(const_prop_dct_type);
	if (!dctType)
		lib_Error("Missing property '" + const_prop_dct_type + "' for section: " + section.name);

	
	//********* log:
	var indent = "";
	for (var i = 0; i < sectionLevel; i++) {
		indent += "    ";
	}
	console.log(indent + "cBookSection_autodoc, " + section.name + " (" +  dctType + ")" + ", level " + sectionLevel);
	//*********
	
	if (section.type == "junction")
		return "";
		
	var docString = "";

	if (section.prop(const_prop_dct_type) === const_conceptType_representation__section) {

		// only variant 0 relevant
		if (variant == 0)
			viewDoc = CBookSection_documentAsAsciidoc(section, sectionLevel);
	}
	
	else if (section.prop(const_prop_dct_type) === const_conceptType_representation__archimateView) {
	
		viewDoc = c_BookSectionViewRef_autodoc(section, sectionLevel, variant);

	}
	
	
	else 
		lib_Error("Unexpected " + const_prop_dct_type + " = " + section.prop(const_prop_dct_type));

	docString += viewDoc;	
	docString += "\n\n";
	
	
	
	// drill down
	var firstSubSection = cBookSection_determineFirstSubSection(section);


	//if (firstSubSection)
	//	cBookSection_autodoc(firstSubSection, sectionLevel + 1);

	var nextSiblingSubSection = firstSubSection;
	if (firstSubSection) {

		docString += ":leveloffset: +1" + "\n";
		while (nextSiblingSubSection) {
			
			//erik docString += "=" + " " + nextSiblingSubSection.name + "\n"; // note: hardcoded top level sectionLevel!!!!!!!!!!!!!!!!!!!
			
			docString += cBookSection_IncludeSubsection(section, nextSiblingSubSection);

			cBookSection_autodoc(nextSiblingSubSection, sectionLevel + 1, variant);	

			nextSiblingSubSection = cBookSection_nextSiblingSection(nextSiblingSubSection);
		
		}
		docString += ":leveloffset: -1" + "\n";
//lib_TestExit(docString);	
	}
		
/**
	// next at same level
	var nextSiblingSection = cBookSection_nextSiblingSection(section);
	if (nextSiblingSection) {
		cBookSection_autodoc(nextSiblingSection, sectionLevel);
	}
***/

	// save asciidoc text to file, unless files is master
	var doSave = true;
	var master = cConcept_GetProperty(section, const_prop_antoraMaster);
	if (master && master === const_prop_antoraMaster_value_file) {
		doSave = false;
		
		lib_TestExit("Temp test and exit: Master is file for section " + section.name);
	}

	if (!viewDoc)
		doSave = false;
	
	if (doSave)
		CBookSection_saveViewPageToFile(section, docString, modulePath, variant);	
//lib_TestExit(docString);
	return docString;
}

function CBookSection_documentAsAsciidoc(section, sectionLevel) {
	
	var docString = "";

	docString += cAntoraModule_asciidocTemplateHeader(section.name, cBookSection_getAntoraModule(section), 
														cBookSection_getAntoraComponent(section), 
														cBookSection_getAntoraVersion(section));


	// take the description from the section object, if not  empty
	if (section.documentation) {
		
		var option_addIntroHeader = false;
		if (option_addIntroHeader) {
			var sectionName = "Om " + section.name;
			docString += cBookSection_SectionHeading(sectionName, 2);
		}
		docString += section.documentation;	
	}

	return docString;


}

function cBookSection_nextSiblingSection(section) {

	var outgoingAssociationRels = $(section).outRels("association-relationship");
	
	//console.log("#outgoingAssociationRels = " + outgoingAssociationRels.size());
	
	if (outgoingAssociationRels.size() === 1) {
		return outgoingAssociationRels.first().target;
	}
	else if (outgoingAssociationRels.size() === 0)
		return null;
	else {
		
		lib_Error("More than one outgoing association relation from section " + section.name + "." );
	}
}

function cBookSection_determineFirstSubSection(section) {

	var firstSubSection = null;
	var incomingAssociationRels = null;
	
	var subSections = cElement_getSubElements(section);
	if (subSections != null) {
		
		subSections.each(function(sub) {				
			var numIncomingAssociationRels = $(sub).inRels("association-relationship").size();

			
			if (numIncomingAssociationRels == 0) { // i.e. no preceeding chapter at the same hierarchy level
				firstSubSection = sub;	
				return firstSubSection;
			}				
		});
	}
	
	return firstSubSection; // null = no further subsections
	
}



function cBookSection_documentSectionAsAsciidocChapters(section, view, sectionLevel) {  // deprecated??


	var docString = "";

	// main chapter caption
	docString += "\n";
	
	var headerString = "=";
	var i;
	for (i = 0; i < sectionLevel; i++) {
		headerString += "=";
	}
	docString += headerString + " "; 
	
	docString += "Oversikt";
	// docString += " - " + view.name;
	docString += "\n";



	// view description
	if (view.documentation && view.documentation.length() > 0) {
		docString += "\n";
		docString += view.documentation;
		docString += "\n\n";
	}

	// save image of the archi view to file
//cView_saveViewImageToFile(view);
	
	//if (cView_GetImagePath(view)) {
		docString += "." + view.name;
		
		if (const_option_antora) {		
			docString += "\nimage::" +  view.name + ".png" + "[alt=" + view.name + " image]";
		}
		
		//cView_GetImagePath(view) + "[alt=" + view.name + " image]";
				
		// todo: ",link = ..." for link to published web view
		docString += "\n\n"
	//}	

	/*
	if (optionSectionLevel == 2) {
		docString += "== "; 
		docString += "Elementer";
		docString += "\n";
	}
	*/

	//topLevelElms = cView_getTopLevelElementsOf(view, elms, rels);
	topLevelElms = cView_getTopLevelElementsOf(view);
	
	
	topLevelElms.each(function(e) {
		
		docString += cView_documentElementHiearchy(view, e, sectionLevel);
	});	
	
	
	// save asciidoc text
	var modulePath = CBookSection_determineModulePath(section);
	
	var doSave = true;
	var master = cConcept_GetProperty(section, const_prop_antoraMaster);
	if (master && master === const_prop_antoraMaster_value_file)
		doSave = false;
	
	if (doSave)
		CBookSection_saveViewPageToFile(section, docString, modulePath, variant);
	
	//console.log(docString);
	
	return docString;
}


function cBookSection_sectionHeader(section, sectionLevel) {

	var docString = "";
	//docString += cBook_asciidocTemplateHeader(book);

	// main chapter caption
	docString += "\n";
	
	var headerString = "=";
	/*
	var i;
	for (i = 0; i < sectionLevel; i++) {
		headerString += "=";
	}
	*/
	
	docString += headerString + " "; 
	
	docString += "Om " + section.name;
	//docString += "Oversikt";
	// docString += " - " + book.name;
	docString += "\n";



	// book description
	docString += "\n";
	docString += section.documentation;
	docString += "\n\n";

/* not here-----------------------
	docString += "." + book.name;
	docString += "\nimage::" +  book.name + ".png" + "[alt=" + book.name + " image]";
				
	// todo: ",link = ..." for link to published web view
	docString += "\n\n";
*/

	return docString;
}

function cBookSection_sectionFileName(section) {

/*
	var bookAntoraModule = cBookSection_getAntoraModule(section);
	
	if (!bookAntoraModule) 
		lib_Error("Missing property " + const_prop_antoraModule);
	
	bookAntoraModule += ".adoc"; 
	return bookAntoraModule;
*/
const_prop_antoraFile
	var fileName = CBookSection_filenameWithoutExtension(section) + ".adoc";
	return fileName;

}

function cBookSection_getAntoraComponent(section) {
	return cConcept_GetProperty(section, const_prop_antoraComponent);
}
function cBookSection_getAntoraVersion(section) {
	return cConcept_GetProperty(section, const_prop_antoraVersion);
	
}
function cBookSection_getAntoraModule(section) {
	return  cConcept_GetProperty(section, const_prop_antoraModule)
}


/*** NOT USED
function CBookSection_saveSectionPageToFile(section, docString, modulePath) {

lib_Error("function CBookSection_saveSectionPageToFile to be deleted!?");

	var pagesDirPath = modulePath + "\\" + "pages";
	var pathAndfileName = pagesDirPath + "\\" + section.name + ".adoc";

	cFilesystem_mkDirIfNotExisting(pagesDirPath);

	var fileName = null;


	if (option_promptFileSave)
		fileName = window.promptSaveFile( { title: "Save view text", filterExtensions: [ "*.adoc" ], fileName: pathAndfileName } );
	else
		fileName = pathAndfileName;
	
		
	if (fileName) {
		$.fs.writeFile(fileName, docString);
	}
	else {
		lib_Error("Undetermined fileName")
	}
}
***/

function CBookSection_getXref(section, variant) {

	var component = cConcept_GetProperty(section, const_prop_antoraComponent);
	var version = cConcept_GetProperty(section, const_prop_antoraVersion);
	var module = cConcept_GetProperty(section, const_prop_antoraModule);
	var versionStr = "";
	if (version)
		versionStr = version + "@";

	var xref = null;
	var filename = null;
	var antoraPath = versionStr + component + ":" + module + ":page$";
	
	if (variant == 0) {
		filename = section.name + ".adoc";
	}
	else {
		filename = section.name + ".var." + variant + ".adoc";
	}

	//xref = "xref:" + antoraPath + filename + "[]" + "\n";
	xref = antoraPath + filename;
	return xref;
}

function CBookSection_filenameWithoutExtension(section) {
	

	var filenameWithoutExtension = section.name;
	var configuredName = cConcept_GetProperty(section, const_prop_antoraFile);
	
	if (configuredName)
		filenameWithoutExtension = configuredName;	
	
	return filenameWithoutExtension;
	
}

function CBookSection_getPathAndfileName(section, modulePath, variant) {

	var filenameWithoutExtension = CBookSection_filenameWithoutExtension(section);
	
	var pagesDirPath = modulePath + "\\" + "pages";
	var pathAndfileName = null;
	if (variant == 0)
		pathAndfileName = pagesDirPath + "\\" + filenameWithoutExtension + ".adoc";
	else
		pathAndfileName = pagesDirPath + "\\" + filenameWithoutExtension + ".var." + variant + ".adoc";
	
	return pathAndfileName;
}

function CBookSection_saveViewPageToFile(section, docString, modulePath, variant) {

	//lib_Log("CBookSection_saveViewPageToFile: " + section.name);
	//if (section.name == "Publisering av hendelser - basiskonsept UH/F")
	//	lib_TestExit("CBookSection_saveViewPageToFile: Publisering av hendelser - basiskonsept UH/F");
		
//if (section.name === "Datautveksling ved publisering – konsumering (hendelsesbasert)")
//	lib_Log("CBookSection_saveViewPageToFile!!!!!!!!!!!!!!!, section=" + section.name);		
		
	if (!docString)
		lib_Error("Attempted to save empty string for Section " + section);

	var pagesDirPath = modulePath + "\\" + "pages";
	var pathAndfileName = CBookSection_getPathAndfileName(section, modulePath, variant);

	cFilesystem_mkDirIfNotExisting(pagesDirPath);

	var fileName = null;

	if (option_promptFileSave)
		fileName = window.promptSaveFile( { title: "Save view text", filterExtensions: [ "*.adoc" ], fileName: pathAndfileName } );
	else
		fileName = pathAndfileName;

	if (!fileName)
		lib_Error("Undetermined fileName in c_BookSectionViewRef_saveViewPageToFile.")
	
	var bakFilename = fileName + ".bak";
	var doWrite = true;
	if (cFilesystem_fileExists(fileName) )
	{
		
		lib_Log("File " + fileName + " exists");
		
		/*
		previousContent = cFilesystem_readTextFile(fileName);
	
		//if (CBookSection_MatchingStrings(docString, previousContent)) {
		if (false) {
			doWrite = false;
			
			lib_Log(fileName + " did not change!" );
		}
		*/
		
		cFilesystem_deleteFile(bakFilename);
		cFilesystem_renameFile(fileName, bakFilename);

	}
	
	if (doWrite) {
	
		
		lib_Log("Writing file " + fileName);
		
		//$.fs.writeFile(fileName, docString);
		
	
		cFilesystem_writeTextFile(fileName, docString);
	}

	var previousContent = cFilesystem_readTextFile(bakFilename);
	var newContent = cFilesystem_readTextFile(fileName);
	
	
	if (previousContent) {
		if (previousContent.equals(newContent)) {
			//lib_TestExit("Test worked!");
			cFilesystem_deleteFile(fileName);
			cFilesystem_renameFile(bakFilename, fileName);
		}
		else
			cFilesystem_deleteFile(bakFilename);
	}

}

function CBookSection_determineModulePath(section) {

	var antoraRootPath = cAntoraModule_GetComponentsRootPath();

	var componentName = cConcept_GetProperty(section, const_prop_antoraComponent);
	var version = cConcept_GetProperty(section, const_prop_antoraVersion);
	var moduleName = cConcept_GetProperty(section, const_prop_antoraModule);


	//lib_Log("antoraRootPath=" + antoraRootPath);
	//lib_Log("componentName=" + componentName);
	//lib_Log("moduleName=" + moduleName);

	if (!antoraRootPath)
		lib_Error("Missing model property " + const_prop_antoraComponentsPath);
	if (!componentName)
		lib_Error("Missing element property " + const_prop_antoraComponent +  " for element '" + section.name + "' with property " + const_prop_dct_type + " = " + section.prop(const_prop_dct_type));
	if (!moduleName)
		lib_Error("Missing element property " + const_prop_antoraModule +  " for element " + section.name + " with property " + const_prop_dct_type + " = "  + section.prop(const_prop_dct_type));
	if (!version)
		lib_Error("Missing element property " + const_prop_antoraVersion +  " for element " + section.name + " with property " + const_prop_dct_type + " = " + section.prop(const_prop_dct_type));
	
	var modulePath = cAntoraModule_locateModulePath(antoraRootPath, componentName, moduleName, version);
	
	if (!modulePath)
		lib_Error("Failed to find existing antora file folder for section='" + section.name + "'" + ", configured module='" + moduleName + "'" + ", component='" + componentName + "'" + ", components root='" + antoraRootPath + "'");
	
	return modulePath;
}


function cBookSection_IncludeSubsection(section, subSection) {
		
	docString = "";
	var component = cBookSection_getAntoraComponent(subSection);
	lib_VerifyNotNull(component);
	var version = cBookSection_getAntoraVersion(subSection);
	//lib_VerifyNotNull(version);
	var module = cBookSection_getAntoraModule(subSection);
	lib_VerifyNotNull(module);

	var versionStr = "";
	if (version)
		versionStr = version + "@";

	var includeFileName = cBookSection_sectionFileName(subSection);

	docString += "include::" + versionStr + component + ":" + module + ":page$" + cBookSection_sectionFileName(subSection) + "[]" + "\n";
		
	return 	docString;
}

function cBookSection_CreateMissingAutobookProperties(section) {
	
	cConcept_CreateMissingProperty(section, const_author_name, const_author_name_value_default);
	cConcept_CreateMissingProperty(section, const_author_email, const_author_email_value_default);
	
	cConcept_CreateMissingProperty(section, const_prop_antoraVersion, const_prop_antoraVersion_value_default);
	cConcept_CreateMissingProperty(section, const_prop_antoraComponent, const_prop_antoraComponent_value_default);
	cConcept_CreateMissingProperty(section, const_prop_antoraModule, const_prop_antoraModule_value_default);
}

function CBookSection_MatchingStrings(normalString, htmlString) {

	//only Norwegian æøå and ÆØÅ - pending the proper way...

	var result = false;



	var str1 = normalString;
	str1 = str1.replace(/æ/g, "Ã¦");
	str1 = str1.replace(/ø/g, "Ã¸");
	str1 = str1.replace(/å/g, "Ã¥");
	str1 = str1.replace(/Æ/g, "Ã†");
	str1 = str1.replace(/Ø/g, "Ã˜ ");
	str1 = str1.replace(/Å/g, "Ã…");


	//var str1 = encodeURIComponent(normalString);
	var str2 = htmlString;
	if (str1 === str2)
		result = true;
		

	else {
		
		lib_Log("\n\n" + "str1, length=" + str1.length() + ":" + str1);
		lib_Log("\n\nstr2, length=" + str2.length() + ":" + str2);
		lib_TestExit("Exiting!");

	}
		

	return result;

}