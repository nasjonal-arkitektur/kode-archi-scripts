/*
 * Merge elements from clibboard, custom.ajs
 */
load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");

console.show();
console.clear();
console.log("Merge elements from clibboard, custom.ajs");

/********* 
->Constans to be transferred to Constants.ajs subsequent to testing
**********/

//const_prop_name_no
//const_prop_name_en
//const_prop_description_no
//const_prop_description_en
//const_prop_namespace



var const_prop_inScope_csvColumn = 0;
var const_prop_namespace_svcColumn = 1;
const const_prop_sequenceNumber = "digdir:sequenceNumber";
var const_prop_sequenceNumber_csvColumn = 2;

var const_prop_category_no = "digdir:category_no";
var const_prop_category_no_svcColumn = 3;

var const_prop_category_en = "digdir:category_en";
var const_prop_category_en_svcColumn = 11;


var const_prop_hexColorcode_scvColumn = 10;


var const_prop_name_no_svcColumn = 4;
var const_prop_description_no_svcColumn = 5;
var const_prop_name_en_svcColumn = 12;
var const_prop_description_en_svcColumn = 13;

const const_prop_ability_no = "digdir:ability_no";
const const_prop_ability_no_scvColumn = const_prop_description_no_svcColumn;
const const_prop_purpose_no = "digdir:purpose_no";
const const_prop_purpose_no_scvColumn = const_prop_ability_no_scvColumn + 1;

const const_prop_ability_en = "digdir:ability_en";
const const_prop_ability_en_scvColumn = const_prop_description_en_svcColumn;
const const_prop_purpose_en = "digdir:purpose_en";
const const_prop_purpose_en_scvColumn = const_prop_ability_en_scvColumn + 1;



/********* 
<-Constans to be transferred to Constants.ajs subsequent to testing
**********/

function getExistingElements(view, seqNo, nameSpace) {

	viewItems = $(view).find().filter("element");

	var resultList = null;

	if (viewItems != null) {
		
		resultList = cCollection_GetItemsWithSeqNoAndNamespace(viewItems, seqNo, nameSpace);
		
		//var elmList = cCollection_GetItemsWithNameAndNamespace(viewItems, name, nameSpace);
		//if (elmList)
		//	result = elmList.first();
		
	}

	return resultList; // may be null, one or more occurencies of the same object
	
	// TODO: verify that the id is the same of all elements in the resultList
}
	
	
/*
	viewItems.each(function(elm) {	

		if (resultingItems == null) {
			if (item.name == itemName) // case sensitive
				resultingItems = $(item);
		}
		else {
			
			var itemInList = cCollection_GetItemsWithGivenId(resultingItems, item);
			
			if (itemInList.size() < 1) {
				if (item.name == itemName) // case sensitive
					resultingItems.add($(item));
			}
		}
	});
*/	


function getClipboard() {
	
	var Toolkit = Java.type("java.awt.Toolkit");
	var DataFlavor = Java.type("java.awt.datatransfer.DataFlavor");

    var t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
	

    //try {
      if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        var txt = t.getTransferData(DataFlavor.stringFlavor);

		return txt;
        //return txt.trim();
      }
    //} catch (Exception e) {
    //}

    return "";
}
  
var txt = getClipboard();
console.log(txt);

var selectedViews = $(selection).filter("archimate-diagram-model");

if(selectedViews.size() < 1) {
	window.alert("No views selected");
	exit();
}
else if(selectedViews.size() > 1) {
	window.alert("More than one view selected");
	exit();
}

var view = selectedViews.first();


var arr = txt.split("\n");
var concept = null;
var elm = null;

/*
var const_x_start = 10;
var const_y_start = 10;
var const_x_incr = 143 + 10;
var const_y_incr = 71 + 10;
*/

var x = const_x_start;
var y = const_y_start;

var elementType = "capability";
var elementType = window.prompt("Archi concept type?", elementType);

/*
for (i = 0; i < arr.length; i++) {
	concept= model.createElement(elementType, arr[i]);
	elm = view.add(concept, x, y, -1, -1);	
	//elm.documentation = "doc";
	x += 143; // default width is 133
}
*/

/* ver. 1
for (i = 0; i < arr.length; i++) {

	var line = arr[i];
	var arr2 = line.split("\t");
	var name = arr2[0];
	var descr = arr2[1];
	
	concept= model.createElement(elementType, name);
	if (descr)
		concept.documentation = descr;
	elm = view.add(concept, x, y, -1, -1);	
	//elm.documentation = "doc";
	x += 143; // default width is 133
}
*/

var previousLevel = 0;
var previousConcept = null;
var previousElm = null;
var parentConcept = null
var parentElm = null;

for (i = 0; i < arr.length; i++) {

	var line = arr[i];
	var arr2 = line.split("\t");
	
	var level = 0;
	var name = null;
	var descr = null;
		
	if (arr2[0]) {
		level = 0;
		name = arr2[const_prop_name_no_svcColumn]; 
		descr = arr2[const_prop_description_no_svcColumn];

//lib_TestExit(column3);

	}
	else if( arr2[1]) {
		level = 1;
		name = arr2[1]; 
		descr = arr2[2];
	}
	else if( arr2[2]) {
		level = 2;
		name = arr2[2]; 
		descr = arr2[3];
	}


	var inScope = true;
	if (arr2[const_prop_inScope_csvColumn])
		if (arr2[const_prop_inScope_csvColumn] == 0)
			inScope = false; 

	if (name && inScope) { // or else it's a blank line

		name = name.trim();
		var id = null;
		
		var option_stripIDInName = false; // ??????????
		if (option_stripIDInName) {
			
			if (line.indexOf(":") != -1) {
			
				var nameArr = line.split(":"); // based on a common practice, but this is by no means foolproof
				name = nameArr[1].trim();
				id = nameArr[0].trim();
			}
			
		}
		
		
		var existingElements = getExistingElements(view, arr2[const_prop_sequenceNumber_csvColumn], arr2[const_prop_namespace_svcColumn]);
		if (existingElements) {
			concept = existingElements.first().concept;
			concept.name = name; // in case it changed
		}
		else
			concept= model.createElement(elementType, name);
		// rather use var element = model.createElement(elementType, name);
		
		
		if (descr)
			concept.documentation = descr;
		
		
		if (id) //????????????????????????????????????????????????????????????????
			cConcept_SetProperty(concept, const_prop_dct_identifier, id);




		if (arr2[const_prop_category_no_svcColumn])	
			cConcept_SetProperty(concept, const_prop_category_no, arr2[const_prop_category_no_svcColumn]);
		if (arr2[const_prop_name_no_svcColumn])	
			cConcept_SetProperty(concept, const_prop_name_no, arr2[const_prop_name_no_svcColumn]);
		if (arr2[const_prop_description_no_svcColumn])
			cConcept_SetProperty(concept, const_prop_description_no, arr2[const_prop_description_no_svcColumn]);	

		if (arr2[const_prop_category_en_svcColumn])	
			cConcept_SetProperty(concept, const_prop_category_en, arr2[const_prop_category_en_svcColumn]);

		if (arr2[const_prop_name_en_svcColumn])	
			cConcept_SetProperty(concept, const_prop_name_en, arr2[const_prop_name_en_svcColumn]);
		if (arr2[const_prop_description_en_svcColumn])
			cConcept_SetProperty(concept, const_prop_description_en, arr2[const_prop_description_en_svcColumn]);	
		

		if (arr2[const_prop_sequenceNumber_csvColumn])
			cConcept_SetProperty(concept, const_prop_sequenceNumber, arr2[const_prop_sequenceNumber_csvColumn]);
		
		
		if (arr2[const_prop_namespace_svcColumn])
			cConcept_SetProperty(concept, const_prop_namespace, arr2[const_prop_namespace_svcColumn]);


		if (arr2[const_prop_name_en_svcColumn])
			cConcept_SetProperty(concept, const_prop_name_en, arr2[const_prop_name_en_svcColumn]);
		if (arr2[const_prop_description_en_svcColumn])
			cConcept_SetProperty(concept, const_prop_description_en, arr2[const_prop_description_en_svcColumn]);
			

		if (arr2[const_prop_ability_no_scvColumn])
			cConcept_SetProperty(concept, const_prop_ability_no, arr2[const_prop_ability_no_scvColumn]);
		if (arr2[const_prop_purpose_no_scvColumn])
			cConcept_SetProperty(concept, const_prop_purpose_no, arr2[const_prop_purpose_no_scvColumn]);
		if (arr2[const_prop_ability_en_scvColumn])
			cConcept_SetProperty(concept, const_prop_ability_en, arr2[const_prop_ability_en_scvColumn]);
		if (arr2[const_prop_purpose_en_scvColumn])
			cConcept_SetProperty(concept, const_prop_purpose_en, arr2[const_prop_purpose_en_scvColumn]);


		if (previousLevel == level && level == 0 && i > 0) {
			parentConcept = null;
			parentElm = null;
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
		}
		else if (previousLevel == level-1) {
			parentConcept = previousConcept;
			parentElm = previousElm;
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
		}
		else if (previousLevel == level && level > 0) {
			x += const_x_incr;
		}
		else if (previousLevel == level + 1) {
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
			parentConcept = null;
			parentElm = null;
		}
			
		//x = const_x_start +  const_x_incr * level;
		if (existingElements)
			elm = existingElements.first();
		else
			elm = view.add(concept, x, y, -1, -1);	
		//x += 143; // default width is 133
		
		if (arr2[const_prop_hexColorcode_scvColumn])	
			elm.fillColor = arr2[const_prop_hexColorcode_scvColumn]; // element!
		
		elm.labelExpression = "${property:" + const_prop_sequenceNumber + "}. ${name}";
		elm.textPosition = TEXT_POSITION.CENTER;
		
		if (parentConcept) {
			var relType = "composition-relationship";
			var relName = "composes";
			var newRelation = model.createRelationship(relType, relName, parentConcept, concept);
			//view.add(newRelation, parentElm, elm);
		}
		
		previousConcept = concept;
		previousElm = elm;
		previousLevel = level;
	}

	cView_ShowHiddenRelationships(view);
}


