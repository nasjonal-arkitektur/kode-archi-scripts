/*
 * Create elements from clibboard.ajs
 */
load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");

console.show();
console.clear();
console.log("Create elements from clibboard.ajs");


function getClipboard() {
	
	var Toolkit = Java.type("java.awt.Toolkit");
	var DataFlavor = Java.type("java.awt.datatransfer.DataFlavor");

    var t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);
	

    //try {
      if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        var txt = t.getTransferData(DataFlavor.stringFlavor);

		return txt;
        //return txt.trim();
      }
    //} catch (Exception e) {
    //}

    return "";
}
  
var txt = getClipboard();
console.log(txt);

var selectedViews = $(selection).filter("archimate-diagram-model");

if(selectedViews.size() < 1) {
	window.alert("No views selected");
	exit();
}
else if(selectedViews.size() > 1) {
	window.alert("More than one view selected");
	exit();
}

var view = selectedViews.first();


var arr = txt.split("\n");
var concept = null;
var elm = null;

/*
var const_x_start = 10;
var const_y_start = 10;
var const_x_incr = 143 + 10;
var const_y_incr = 71 + 10;
*/

var x = const_x_start;
var y = const_y_start;

var elementType = "capability";
var elementType = window.prompt("Archi concept type?", elementType);

/*
for (i = 0; i < arr.length; i++) {
	concept= model.createElement(elementType, arr[i]);
	elm = view.add(concept, x, y, -1, -1);	
	//elm.documentation = "doc";
	x += 143; // default width is 133
}
*/

/* ver. 1
for (i = 0; i < arr.length; i++) {

	var line = arr[i];
	var arr2 = line.split("\t");
	var name = arr2[0];
	var descr = arr2[1];
	
	concept= model.createElement(elementType, name);
	if (descr)
		concept.documentation = descr;
	elm = view.add(concept, x, y, -1, -1);	
	//elm.documentation = "doc";
	x += 143; // default width is 133
}
*/

var previousLevel = 0;
var previousConcept = null;
var previousElm = null;
var parentConcept = null
var parentElm = null;

for (i = 0; i < arr.length; i++) {

	var line = arr[i];
	var arr2 = line.split("\t");
	
	var level = 0;
	var name = null;
	var descr = null;
		
	if (arr2[0]) {
		level = 0;
		name = arr2[0]; 
		descr = arr2[1];
	}
	else if( arr2[1]) {
		level = 1;
		name = arr2[1]; 
		descr = arr2[2];
	}
	else if( arr2[2]) {
		level = 2;
		name = arr2[2]; 
		descr = arr2[3];
	}


	if (name) { // or else it's a blank line

		name = name.trim();
		var id = null;
		
		var option_stripIDInName = true; 
		if (option_stripIDInName) {
			
			if (line.indexOf(":") != -1) {
			
				var nameArr = line.split(":"); // based on a common practice, but this is by no means foolproof
				name = nameArr[1].trim();
				id = nameArr[0].trim();
			}
			
		}
		
		concept= model.createElement(elementType, name);
		if (descr)
			concept.documentation = descr;
		if (id)
			cConcept_SetProperty(concept, const_prop_dct_identifier, id);

		if (previousLevel == level && level == 0 && i > 0) {
			parentConcept = null;
			parentElm = null;
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
		}
		else if (previousLevel == level-1) {
			parentConcept = previousConcept;
			parentElm = previousElm;
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
		}
		else if (previousLevel == level && level > 0) {
			x += const_x_incr;
		}
		else if (previousLevel == level + 1) {
			x = const_x_start +  const_x_incr * level;
			y += const_y_incr; 
			parentConcept = null;
			parentElm = null;
		}
			
		//x = const_x_start +  const_x_incr * level;
		elm = view.add(concept, x, y, -1, -1);	
		//x += 143; // default width is 133
		
		if (parentConcept) {
			var relType = "composition-relationship";
			var relName = "composes";
			var newRelation = model.createRelationship(relType, relName, parentConcept, concept);
			//view.add(newRelation, parentElm, elm);
		}
		
		previousConcept = concept;
		previousElm = elm;
		previousLevel = level;
	}

	cView_ShowHiddenRelationships(view);
}


