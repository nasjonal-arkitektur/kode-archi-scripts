load(__DIR__ + "/common/Constants.ajs");
load(__DIR__ + "/common/c_Model.ajs");
load(__DIR__ + "/common/c_View.ajs");
load(__DIR__ + "./common/c_Clipboard.ajs");
load(__DIR__ + "/common/c_Selection.ajs");
load(__DIR__ + "/common/c_Concept.ajs");

 
console.show();
console.clear();


var docString = "";
var view = CSelection_GetTheSelectedView();
var elms = cView_GetElementsInView(view);
var rels = cView_GetRelationshipsInView(view);
var renderingpath = "";

var templateheader = 
/*
"////" + "\n" +
"Guide to the below header attributes:" + "\n\n" +

"    lang: en; no" + "\n" +
"    difi_orig_language: en; no" + "\n" +
"    difi_translation_status: -; missing; incomplete; OK " + "\n" +
"    keywords_en: comma separated list of english keywords (no controlled vocabulary); TBD" + "\n" +
"    keywords_no: comma separated list of Norwegian keywords (no controlled vocabulary); TBD  " + "\n\n" +
    
"Note: The _lang_ value may be overridden by a command line parameter." + "\n" +
"////" + "\n\n" +
*/
":lang: no" + "\n" +
":difi_orig_language: no" + "\n" +
":doctitle_en: English Document Title" + "\n" +
":doctitle_no: " + view.name + "\n" + // Erik: Todo - pick it from the attribute...
":difi_translation_status: -" + "\n" +
":keywords_en: TBD" + "\n" +
":keywords_no: TBD" + "\n" +
":toclevels: 3" + "\n" +
":difi_doctype: Basic Book Template" + "\n\n" +
":toc: left" + "\n" +
":sectnums:" + "\n";

/*
"// The above parameters are processed by scripts included by the following statement" + "\n" +
"include::../plattform_felles/includes/commonincludes.adoc[]" + "\n\n";
*/

docString += templateheader;



////
// chapter caption
docString += "== "; // erik: how to evaluate chapter level?
docString += view.name;
docString += "\n";
////

// view description
docString += "\n";
docString += view.documentation;
docString += "\n\n";


// image of the archi view
if ( cModel_GetRenderingRootPath() && cView_GetRelativeRenderPath(view) ) {
	
	
	docString += "." + view.name;
	renderingpath = cModel_GetRenderingRootPath() + "\\" + cView_GetRelativeRenderPath(view);
	docString += "\nimage::../" +  cView_GetRelativeRenderPath(view) + "/media/" + view.name + ".png" + "[alt=" + view.name + " image]";
	// todo: ",link = ..." for link to published web view

}

var index = 0;
var elm = null;


while (index < elms.size() - 1) { //	Erik note: Using while. since I had a problem with looping by each...

	e = elms[index];
	var container_done = false;

	rels.each(function(r) {
	
		if (r.type == "composition-relationship"  && r.source.name == e.concept.name) {
			
			if (!container_done) {
				docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
				container_done = true;
			}
			
			var outRels = cConcept_getOutgoingRelations(e.concept);
					
			outRels.each(function(r) {
				var target = $(r).targetEnds();
				target = target.first();
				docString += "\n\n" +  "==== " + target.name + "\n\n" + target.documentation;
			});
		}
		
		elms = elms.filter(function(o) {
			return (o.id != e.id); // in effect here removes the first array element
		});

	});
}

/*
elms.each(function(e) {
	
	rels.each(function(r) {
		
		if (r.type == "composition-relationship") {
			
			if (r.source.name == e.concept.name) {
				docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
			}
			rels = rels.not(function(o) {
						return ( (o.id === r.id) );
			});
		}
		
		
		
	});

	docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
});
*/

/*
rels.each(function(r) {
	
	elms.each(function(e) {
		if (cConcept_HasRelation(e, r)) {
			if (r.type == "composition-relationship") {
				
				if (r.source.name == e.concept.name) {
					docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
					
					var outRels = cConcept_getOutgoingRelations(e.concept);
					
					outRels.each(function(r) {
						var target = $(r).targetEnds();
						target = target.first();
						docString += "\n\n" +  "==== " + target.name + "\n\n" + target.documentation;
							
						
					});	
				
					//docString += "\n"  + r.name + "\t" + r.type + "\t" + r.target.name;
					elms = elms.not(function(o) {
						return ( (o.id == e.id) );
					});
					
					
				}
			}
				
			
		}
	
		//docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
	});
	
	//docString += "\n\n" +  "=== " + e.name + "\n\n" + e.documentation;
});
*/

cClipboard_SetClipboardString(docString);

console.log(docString);

// console.log("Script completed");