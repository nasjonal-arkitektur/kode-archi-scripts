load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");

console.show();
console.clear();
console.log("Import from Excel via clipboard.ajs");


/** OLD 2
function parseCSV(csvString) {
    let rows = [];
    let row = [];
    let cell = '';
    let insideQuotes = false;

    for (let i = 0; i < csvString.length; i++) {
        let char = csvString[i];

        if (char === '"') {
            // Handle case where there are quotes inside quoted text
            if (insideQuotes && csvString[i + 1] === '"') {
                cell += '"';  // Add a literal quote to the cell
                i++;  // Skip the next quote
            } else {
                // Toggle inside/outside quotes
                insideQuotes = !insideQuotes;
            }
            continue;
        }

        // Handle tab characters (end of cell) outside of quotes
        if (char === '\t' && !insideQuotes) {
            row.push(cell.trim());  // Add the current cell to the row
            cell = '';  // Reset cell variable
            continue;
        }

        // Handle newlines (end of row) outside of quotes
        if (char === '\n' && !insideQuotes) {
            row.push(cell.trim());  // Add the last cell to the row
            if (row.length > 1) {  // Ensure we don't add empty rows
                rows.push(row);  // Add the row to the rows array
            }
            cell = '';  // Reset cell for the next row
            row = [];  // Reset row for the next row
            continue;
        }

        // Add the current character to the cell, including newlines inside quotes
        cell += char;
    }

    // Add the last row after finishing the loop
    if (cell) {
        row.push(cell.trim());
        rows.push(row);
    }

    return rows;
}
**/

function parseCSV(csvString) {
    let rows = [];
    let row = [];
    let cell = '';
    let insideQuotes = false;

    for (let i = 0; i < csvString.length; i++) {
        let char = csvString[i];

        if (char === '"') {
            // Handle escaped double quotes ("")
            if (insideQuotes && csvString[i + 1] === '"') {
                cell += '"';
                i++;  // Skip the next quote
            } else {
                insideQuotes = !insideQuotes;
            }
            continue;
        }

        // If we encounter a tab character and we are not inside quotes, this marks the end of a cell
        if (char === '\t' && !insideQuotes) {
            // Check if the cell contains a newline character
            if (cell.includes('\n') || cell.includes('\r\n')) {
                // The cell contains a newline, so we add quotes around it
                cell = `"${cell}"`;
            } else if (cell.includes('"') && !cell.startsWith('"')) {
                // The cell contains quotes but is not surrounded by them, add quotes manually
                cell = `"${cell}"`;
            }
            row.push(cell.trim());  // Add the current cell to the row
            cell = '';  // Reset the cell variable for the next cell
            continue;
        }

        // If we encounter a newline character and we are not inside quotes, this marks the end of a row
        if (char === '\n' && !insideQuotes) {
            // Same check for the last cell in the row
            if (cell.includes('\n') || cell.includes('\r\n')) {
                cell = `"${cell}"`;
            } else if (cell.includes('"') && !cell.startsWith('"')) {
                cell = `"${cell}"`;
            }
            row.push(cell.trim());  // Add the last cell to the row
            if (row.length > 0) {   // Ensure we don't add empty rows
                rows.push(row);     // Add the row to the rows array
            }
            cell = '';  // Reset the cell for the next row
            row = [];  // Reset the row for the next row
            continue;
        }

        // Add character to cell, including newlines inside quotes
        cell += char;
    }

    // Add the last row after finishing the loop
    if (cell) {
        if (cell.includes('\n') || cell.includes('\r\n')) {
            cell = `"${cell}"`;
        } else if (cell.includes('"') && !cell.startsWith('"')) {
            cell = `"${cell}"`;
        }
        row.push(cell.trim());
        rows.push(row);
    }

    return rows;
}

/** OLD
function parseCSV(csvString) {
    let rows = [];
    let row = [];
    let cell = '';
    let insideQuotes = false;

    for (let i = 0; i < csvString.length; i++) {
        let char = csvString[i];

	    if (char === '"') {
            if (insideQuotes && csvString[i + 1] === '"') {
                // Handle escaped double quotes ("")
                cell += '"';
                i++;  // Skip the next quote
            } else {
                // Toggle the insideQuotes flag
                insideQuotes = !insideQuotes;
            }
            continue;
        }

        // If we encounter a tab character and we are not inside quotes, this marks the end of a cell
        if (char === '\t' && !insideQuotes) {
            row.push(cell.trim());  // Add the current cell to the row
            cell = '';  // Reset the cell variable for the next cell
            continue;
        }

        // If we encounter a newline character and we are not inside quotes, this marks the end of a row
        if (char === '\n' && !insideQuotes) {
            row.push(cell.trim());  // Add the last cell to the row
            if (row.length > 1) {   // Ensure we don't add empty rows
                rows.push(row);     // Add the row to the rows array
            }
            cell = '';  // Reset the cell for the next row
            row = [];  // Reset the row for the next row
            continue;
        }

        // Add character to cell, including newlines inside quotes
        cell += char;
    }

    // Add the last row after finishing the loop
    if (cell) {
        row.push(cell.trim());
        rows.push(row);
    }

    return rows;
}
** OLD */

var createdCount = 0;
var updatedCount = 0;


function getClipboardFormats() {
    var Toolkit = Java.type("java.awt.Toolkit");
    var DataFlavor = Java.type("java.awt.datatransfer.DataFlavor");

    var t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);

    if (t != null) {
        // Hent tilgjengelige formater
        var availableDataFlavors = t.getTransferDataFlavors();
        for (var i = 0; i < availableDataFlavors.length; i++) {
            console.log("Available format: " + availableDataFlavors[i]);
        }
    } else {
        console.log("Clipboard is empty or unavailable.");
    }
}

function getClipboard() {
    var Toolkit = Java.type("java.awt.Toolkit");
    var DataFlavor = Java.type("java.awt.datatransfer.DataFlavor");

    var t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);

    if (t != null) {
        // Prøv å hente HTML-innholdet
        var htmlFlavor = new DataFlavor("text/html;class=java.lang.String");
        if (t.isDataFlavorSupported(htmlFlavor)) {
            var htmlTxt = t.getTransferData(htmlFlavor);
			// Normalize newlines to Unix format (\n)
			htmlTxt = htmlTxt.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            console.log("Clipboard HTML content:", htmlTxt);
            return htmlTxt;
        } 
        // Hvis HTML ikke er tilgjengelig, prøv vanlig tekst
        else if (t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
            var txt = t.getTransferData(DataFlavor.stringFlavor);
			// Normalize newlines to Unix format (\n)
			txt = txt.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
            console.log("Clipboard text:", txt);
            return txt;
        } else {
            console.log("No supported text format found in clipboard.");
        }
    }
    return "";
}


/** OLD
function getClipboard() {

//getClipboardFormats();
//exit();


    var Toolkit = Java.type("java.awt.Toolkit");
    var DataFlavor = Java.type("java.awt.datatransfer.DataFlavor");

    var t = Toolkit.getDefaultToolkit().getSystemClipboard().getContents(null);

    if (t != null && t.isDataFlavorSupported(DataFlavor.stringFlavor)) {
        var txt = t.getTransferData(DataFlavor.stringFlavor);
		txt = txt.replace(/\r\n/g, "\n"); // Windows line break
		console.log("Clipboard content:", txt);  // Legg til logging he
        return txt;
    }
    return "";
}
** OLD */ 


function parseClipboardData(clipboardText) {
    const parsedData = [];
    let row = [];
    let cell = '';
    let insideQuotes = false;

    // Iterate through the clipboard content character by character
    for (let i = 0; i < clipboardText.length; i++) {
        const char = clipboardText[i];
        const nextChar = clipboardText[i + 1];

        if (char === '"') {
            if (insideQuotes && nextChar === '"') {
                // Handle escaped quote ("")
                cell += '"';
                i++; // Skip the next character
            } else {
                // Toggle the insideQuotes flag
                insideQuotes = !insideQuotes;
            }
        } else if (char === '\t' && !insideQuotes) {
            // Tab character ends the cell when not inside quotes
            row.push(cell);
console.log(cell);
            cell = '';
        } else if (char === '\n' && !insideQuotes) {
            // Newline character ends the row when not inside quotes
            row.push(cell);
console.log(cell);
            parsedData.push(row);
            row = [];
            cell = '';
        } else {
            // Regular character, add it to the current cell
            cell += char;
        }
    }

    // Push any remaining cell/row data
    if (cell) {
console.log(cell);		
        row.push(cell);
    }
    if (row.length > 0) {
        parsedData.push(row);
    }

    return parsedData;
}

/* ERIK, SEPT. 2024 - DEBUGGING IN-WORK 
// Example usage:
const clipboardContent = 'Cell 1\t"Cell with\nline break"\t"Cell with ""quotes"""\tCell 4\nRow 2 Cell 1\tRow 2 "Normal" Cell 2\tRow 2 Cell 3';
const parsed = parseClipboardData(clipboardContent);

// Now you can work with the parsed data in jArchi
parsed.forEach(row => {
    console.log(row); // Process each row, e.g., create/update elements in Archi
});
exit();
*/

var txt = getClipboard();
var parsedData = parseCSV(txt);

var selectedViews = $(selection).filter("archimate-diagram-model");

if(selectedViews.size() < 1) {
    window.alert("No views selected");
    exit();
}
else if(selectedViews.size() > 1) {
    window.alert("More than one view selected");
    exit();
}

var view = selectedViews.first();
var viewWasEmpty = cView_IsEmpty(view);

var x = const_x_start;
var y = const_y_start;


var elementType = "business-service"; // TODO, Erik: Take it from the input, if archi:type is there?
var elementType = window.prompt("Archi concept type?", elementType);


// Henter properties fra den første linjen
var properties = parsedData[0];

console.log("Found " + parsedData.length + " rows (including header row)");

// Behandler de gjenværende radene
for (let i = 1; i < parsedData.length; i++) {
    let row = parsedData[i];


    // ... [Resten av koden din for å behandle hver rad og kolonne] ...
	var archi_main_name = null;
	var groupingLevel = null;
	var concept = null;
	var elm = null;
	var prop = null;	
	
	var existingConceptWithConceptId = false;
	
	var imported_archi_concept_id = null;
	
	for (var p = 0; p < properties.length; p++) {
		
		prop = properties[p];
		//console.log(prop);
		
		if (prop === CONST_GROUPING_LEVEL) {
			groupingLevel = row[p];
console.log("groupingLevel=" + groupingLevel);
		}
		
		if (prop == const_prop_archi_guid) {
			imported_archi_concept_id = row[p];
			
			//console.log("*Importing " + " imported_archi_concept_id  = " + imported_archi_concept_id);
			

			if (imported_archi_concept_id.length() > 0) {

				concept = cModel_GetConceptWithId(imported_archi_concept_id);
				if (concept) {
					
					//console.log("Found " + concept.name + "(" + concept.type + "), id = " + concept.id);
					
					//if ( !elementType || (elementType && elementType === concept.type) ) {
					
						existingConceptWithConceptId = true;
						updatedCount++;
					//}
				}
				else {
					//console.log("Warning: Given " + const_prop_archi_guid + " = " + imported_archi_concept_id + " does not exist in this model");
					lib_Error("Given " + const_prop_archi_guid + " = " + imported_archi_concept_id + " does not exist in this model. Exiting");
				}
			}
			
			//break;
		}
	}
	
	var warningConceptWithSameNameAndTypeExists = false;
	
	// find the archi main name among the input properties and create the concept if it doesn't already exit in the model
	if (!existingConceptWithConceptId) {
		
		var conceptType = elementType; // default as set by user initially 


		// first check for a row-specific elementType (archi:type)
		for (var p = 0; p < properties.length; p++) {
			prop = properties[p];
			if (prop == const_prop_archi_type) {
				conceptType = row[p];
			}
		}

		for (var p = 0; p < properties.length; p++) {
			
			prop = properties[p];
			
			if (prop == const_arhi_name) {
				archi_main_name = row[p];
				console.log(i + ". " + "Creating archi concept: " + archi_main_name);

				if (!conceptType)
					lib_Error("Missing conceptType for " + archi_main_name + "! Should be set either by default as prompted initially in this script, or for each row by the 'archi:type' property." +  " Exiting...");

				if (!imported_archi_concept_id)  {
					
					// importing a record without the GUID set in the spreadsheet - could be an acually new concept, or the spreadsheet wasn't updated
			
					if (CModel_ConceptWithSameNameAndTypeExists(archi_main_name, conceptType)) {
						warningConceptWithSameNameAndTypeExists = true;
						lib_Warning("Import from spreadsheet via clipboard; Label text: NO CONCEPT GUID, HOWEVER EXISTING NAME:\n" + archi_main_name
							+ "\nSuggestion: Check if the spreadsheet should be updated prior to import?");
					}
					
				}
		
				concept = model.createElement(conceptType, archi_main_name);
				
//console.log("Trying to set concept.id = " + concept.id);
				cConcept_SetProperty(concept, const_prop_archi_guid, concept.id);
				
				createdCount++;
			}
		}
		if (!concept)
			lib_Error("Failed to find the Archi concept main name in the input, row #" + i);
	}

	
	if (!concept)
		lib_Error("Unexpected error - no concept established?" + i);
	
	//const const_archi_documentation = "archi:documentation";
				
				
	// update the newly created (or existing) concept with other properties as found in the input
	for (var p = 0; p < properties.length; p++) {
		
		property = properties[p]; 
		//console.log(property);
		
		
		//if (property != const_arhi_name && property != const_prop_archi_guid) {
		if (property != const_prop_archi_guid) {
		
		
		
			if (property == const_arhi_name) {
				concept.name = row[p];
				console.log(i + ". " + "Updating archi concept: " + concept.name + "(" + concept.id + ")" );
			}
			else if (property == const_archi_documentation)
				concept.documentation = row[p];
			else
				// TODO:  check that the property is valid?
				cConcept_SetProperty(concept, property, row[p]);
				
		}
	}
	
	
	// Add the newly created concept to this view if it doesn't already exist here (though it could exist in another view of the model|)
	if (!cView_IsConceptPresentInView (view, concept) ) {  // previous logic: if (!existingConceptWithConceptId) {

		// see new solution above, i.e. not to be treated as a concept property....var groupingLevel = cConcept_GetProperty(concept, CONST_GROUPING_LEVEL);
		
		if (groupingLevel)
			x = const_x_start  +  const_x_incr * groupingLevel;
		else
			x = const_x_start;
		
		elm = view.add(concept, x, y, -1, -1);
		
		if (!existingConceptWithConceptId) {
			
			if (warningConceptWithSameNameAndTypeExists) {
				elm.labelExpression = "Warning (label text): NEW CONCEPT GUID, EXISTING NAME:\n" + elm.name;
				elm.fontColor = "#fb0100"; // red
			}
			else if (!viewWasEmpty) {
				elm.labelExpression = "Label text: NEW CONCEPT GUID:\n" + elm.name;
				//elm.fillColor = "#03fa00"; // green
				elm.fontColor = "#fb0100"; // red
			}
		}
		
		y += const_y_incr; 
		x = const_x_start;
	}
	

}

console.log("Completed importing " + (parsedData.length - 1) + " elements");
console.log("Created " + createdCount + " new elements and updated " + updatedCount + " existing elements");


console.log("Script completed");