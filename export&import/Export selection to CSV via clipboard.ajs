/*
 * Export selection to CSV via clipboard
 */
 
"use strict";

load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");

console.clear();
console.log("Export selection to CSV via clipboard - script starting");


// Sorting function that prioritizes y position, then x position
function sortByYThenX(a, b) {
    var boundsA = a.bounds;
    var boundsB = b.bounds;

    // First, compare by y position
    if (boundsA.y !== boundsB.y) {
        return boundsA.y - boundsB.y; // Sort by y (ascending)
    }

    // If y positions are the same, sort by x position
    return boundsA.x - boundsB.x; // Sort by x (ascending)
}

// Structure Detection: Builds hierarchy based on graphical positions and relationships
function buildConceptHierarchy(view) {
    var hierarchy = [];

    // Detect top-level elements based on relationships and graphical positions
    var topLevelElements = getTopLevelElements(view);

    if (!topLevelElements) {
        console.log("No top-level elements found in this view.");
        return hierarchy;
    }

    // Sort top-level elements based on graphical x and y positions
    topLevelElements.sort(sortByYThenX);

    // Recursively build the hierarchy for top-level and contained elements
    topLevelElements.each(function(element) {
		
        var elementHierarchy = buildElementHierarchy(element, view, 1); // Start with level 1
        hierarchy.push(elementHierarchy);
    });

    return hierarchy;
}

// Recursive function to build element hierarchy, auto-assign sequence_no and grouping-level
function buildElementHierarchy(element, view, level) {
	
	console.log("\t".repeat(level - 1) + element.name);
	
    var structure = {
        concept: element,
        children: [],
        level: level,
        sequence_no: level // Assign grouping-level and sequence_no automatically
    };

    // Get child elements visible in the view
    var subElements = getSubElementsInView(element, view);
    
    // Check if subElements is not null before trying to sort it
    if (subElements != null && subElements.length > 0) {
        subElements.sort(sortByYThenX); // Sort children by graphical position
    }

    // Assign sequence numbers and recurse into child elements
    var seqNo = 1;
    if (subElements) {
        subElements.each(function(subElement) {
            var childStructure = buildElementHierarchy(subElement, view, level + 1); // Recursive call for next level
            childStructure.sequence_no = seqNo++;
            structure.children.push(childStructure);
        });
    }

    return structure;
}

// Recursive function to format an element and its children with dynamic tab-indented names, properties, level, and seq-no
function formatElementToCSV(structure, properties, csvString, maxLevel, seqNoAtLevel) {
    var tabs = "\t".repeat(structure.level - 1); // Create tab indents for the current level
    var trailingTabs = "\t".repeat(maxLevel - structure.level); // Add trailing tabs for level columns

    // Use your custom function cConcept_getPropertiesAsExcelRow for property formatting
    // Level and seq-no columns are placed right after the hierarchy levels and before the properties
    csvString += tabs + structure.concept.name + trailingTabs + "\t" + structure.level + "\t" + seqNoAtLevel + "\t" + cConcept_getPropertiesAsExcelRow(structure.concept, properties) + "\n";

    // Recursively format children
    var seqNo = 1; // Track sequence number within this level
    structure.children.forEach(function(childStructure) {
        csvString = formatElementToCSV(childStructure, properties, csvString, maxLevel, seqNo++);
    });

    return csvString;
}


// Function to calculate the maximum depth (level) of the hierarchy
function calculateMaxLevel(hierarchy) {
    var maxLevel = 0;

    function findMaxLevel(structure) {
        if (structure.level > maxLevel) {
            maxLevel = structure.level;
        }
        structure.children.forEach(findMaxLevel);
    }

    hierarchy.forEach(findMaxLevel);
    return maxLevel;
}

// Function to generate the CSV header dynamically based on the number of levels
function generateCSVHeader(maxLevel, properties) {
    var header = [];

    // Dynamically create level headers based on maxLevel
    for (var i = 1; i <= maxLevel; i++) {
        header.push("level " + i);
    }

	header.push(CONST_GROUPING_LEVEL);
	header.push("seq-no");

    // Add properties to the header
    header = header.concat(properties);

    // Join the header with tabs
    return header.join("\t") + "\n";
}

// String Formatting: Generates a CSV-friendly output from the built structure with dynamic levels, properties, level, and seq-no
function formatHierarchyToCSV(hierarchy, properties, selectedElements) { // erik 2024-10-01: just added selectedElements, but not yet implemented filtering of not selected elements (unclear how to deal with missing levels and so on...)
    // Calculate the maximum number of levels in the hierarchy for trailing tabs
    var maxLevel = calculateMaxLevel(hierarchy);

    // Generate the CSV header dynamically
    // Level and seq-no columns are placed after the last level column but before the properties
    var csvString = generateCSVHeader(maxLevel, properties); // + "\tlevel\tseq-no\t" + properties.join("\t") + "\n";
	console.log("formatHierarchyToCSV, header:" + csvString);

    // Recursively format each element and its children
    var seqNo = 1; // Sequence number for the top-level elements
    hierarchy.forEach(function(elementStructure) {
		// if (selectedElements
        csvString = formatElementToCSV(elementStructure, properties, csvString, maxLevel, seqNo++);  
    });

    return csvString;
}



function getTopLevelElements(view) {
    var elms = cView_GetElementsInView(view);

    if (!elms) {
        console.log("Error: getTopLevelElements");
        return null;
    }

    var topLevelElements = null;

    elms.each(function(e) {
        var doesCompose = false;
        var soleToplevel = true;
        var isTopLevel = true;

        var ownViewRels = $(e).rels();
        ownViewRels.each(function(r) {
            if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.source.id === e.id) {
                doesCompose = true; // The element is the source in a composition or aggregation, so it may contain others
            } else if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.target.id === e.id) {
                soleToplevel = false; // The element is the target in a relationship, so it is contained by another
            }
        });

        // If the element is a source and does not have any incoming composition relationships, it's top-level
        if (doesCompose) {
            ownViewRels.each(function(r) {
                if (r.type == "composition-relationship" && r.target.id === e.id) {
                    isTopLevel = false; // If the element is a target in a composition relationship, it's not top-level
                }
            });
        } else if (!soleToplevel) {
            isTopLevel = false; // If it's not the sole top-level element, it's not top-level
        }

        // If the element is top-level, add it to the list
        if (isTopLevel) {
            if (topLevelElements == null) {
                topLevelElements = $(e);
            } else {
                topLevelElements.add($(e));
            }
        }
    });

    return topLevelElements;
}

// Helper function to get child elements in the view based on relationships
function getSubElementsInView(parentElement, view) {
    var subElements = null;

    // Get relationships of the parent element
    var ownRels = $(parentElement).rels();

    // Get all elements in the view
    var elmsInView = cView_GetElementsInView(view);

    // Loop through relationships to find children (composition/aggregation relationships)
    ownRels.each(function(r) {
        if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.source.id === parentElement.id) {
            // Check if the target element is also in the current view
            elmsInView.each(function(e) {
                if (e.id === r.target.id) {
                    // Add the target element as a child element
                    if (subElements == null) {
                        subElements = $(e);
                    } else {
                        subElements.add($(e));
                    }
                }
            });
        }
    });

    // Return the visible child elements (if any)
    return subElements;
}

// Main function to tie everything together
function generateConceptCSV() {
	
	/*
    var dctConceptTypeFilter = window.prompt("dct:type concept type filter", "capability");
    var selectedElements = CSelection_GetDirectlySelectedOccurences();
    if (!selectedElements) lib_Error("No elements selected. Exiting...");

    var selectedConcepts = CSelection_GetSelectedConcepts("", "", dctConceptTypeFilter);
    if (!selectedConcepts) lib_Error("No concepts selected. Exiting...");
*/

    var csvColumnSpecString = cClipboard_GetClipboardString();
    csvColumnSpecString = lib_SliceTrailingCharIfPresent(csvColumnSpecString, "\n");

    if (!csvColumnSpecString) lib_Error("Missing csvColumnSpecification from clipboard. Exiting...");
    
    var properties = csvColumnSpecString.split("\t");
	//console.log("generateConceptCSV, properties = " + properties);

    // Build the structure (detect and assign hierarchy based on positions and relations)
	var view = null;
	var selectedElements = CSelection_GetDirectlySelectedElements();
	if (selectedElements && selectedElements.size() > 0) {
		view = cElement_GetView(selectedElements.first() );
	}
	else
		view = CSelection_GetTheSelectedView();
	

    var hierarchy = buildConceptHierarchy(view);

    // Format the structure into CSV

	//var csvString = simpleFormatHierarchyToCSV(hierarchy);
    var csvString = formatHierarchyToCSV(hierarchy, properties, selectedElements);

    // Output the CSV string to clipboard
    cClipboard_SetClipboardString(csvString);
    console.log("CSV generation completed. You may paste the result into Excel.");
}

// Simple String Formatting: Generates a CSV-like output with just names and tab-indentation for hierarchy levels
function simpleFormatHierarchyToCSV(hierarchy) {
    var simpleCsvString = ""; // Initialize simple CSV string

    // Recursively format each element and its children
    hierarchy.forEach(function(elementStructure) {
        simpleCsvString = simpleFormatElementToCSV(elementStructure, simpleCsvString);
    });

    return simpleCsvString;
}

// Recursive function to format an element and its children with tab-indented names
function simpleFormatElementToCSV(structure, simpleCsvString) {
    var tabs = "\t".repeat(structure.level - 1); // Create tab indents for each level
    simpleCsvString += tabs + structure.concept.name + "\n"; // Add the element name with indentation

    // Recursively format children
    structure.children.forEach(function(childStructure) {
        simpleCsvString = simpleFormatElementToCSV(childStructure, simpleCsvString);
    });

    return simpleCsvString;
}

// Main function to tie everything together for the simplified CSV
function generateSimpleConceptCSV() {
    // Build the structure (detect and assign hierarchy based on positions and relations)
    var view = CSelection_GetTheSelectedView();
	//var selectedElements = CSelection_GetDirectlySelectedElements();
    var hierarchy = buildConceptHierarchy(view);

    // Generate the simplified CSV string with only names and indentation
    var simpleCsvString = simpleFormatHierarchyToCSV(hierarchy);

    // Output the CSV string to clipboard
    cClipboard_SetClipboardString(simpleCsvString);
    console.log("Simple CSV generation completed. You may paste the result to verify the structure.");
}

// Start the process
//generateSimpleConceptCSV();
generateConceptCSV();











/*******************************************  ERIK's HARD CODED SOLUTION (works) 
function getLevel1Concepts(concepts){
	if (!concepts)
		return concepts;
	
	var lev1Concepts = null;
		
	concepts.each(function(c) {

		var level = c.prop("grouping-level");
		
		if (!level)
			lib_Error("Missing required property 'grouping-level' for concept " + c.name + ". Exiting...");
		
		if (level == 1) {
			
			if (lev1Concepts == null) {
				lev1Concepts = $(c);
			}
			else {
				lev1Concepts.add($(c));
			}
		}
	});
	
	return lev1Concepts;
}


function sortConceptsOnSequenceNo(concepts) {
	
	if (!concepts || concepts.size() < 2)
		return concepts;

	var sortedConcepts = concepts;
	
	sortedConcepts.sort(function(a, b) {
		var seqA = parseInt(cConcept_GetProperty(a, "digdir:sequence_no"), 10);
		var seqB = parseInt(cConcept_GetProperty(b, "digdir:sequence_no"), 10);
		
		if (seqA < seqB) return -1;
		if (seqA > seqB) return 1;
		return 0;
	});
	
	return sortedConcepts;
}

var dctConceptTypeFilter = window.prompt("dct:type concept type filter", "capability"); // user-story, epic, capability


var selectedElements = CSelection_GetDirectlySelectedOccurences(); //erik
if (!selectedElements)
	lib_Error("No elements selected. Exiting...");

var selectedConcepts = CSelection_GetSelectedConcepts("", "", dctConceptTypeFilter);
if (!selectedConcepts)
	lib_Error("No concepts selected. Exiting...");


var csvColumnSpecString = cClipboard_GetClipboardString();
csvColumnSpecString = lib_SliceTrailingCharIfPresent(csvColumnSpecString, "\n"); //there's an extra "\n" at the end of the string when copied from Excel!


if (!csvColumnSpecString)
	lib_Error("Missing csvColumnSpecification by clipboard. Please e.g. copy header columns from Excel and try again. Exiting...");

var lines = csvColumnSpecString.split("\n");
var csvHeader = lines[0];

// throwing away any other lines.. (to-do: could give a warning of more than one line)

var properties = csvColumnSpecString.split("\t");

var csvString = ""; 

csvString += "level 1" + "\t" + "level 2" + "\t" + "level 3" + "\t" + csvHeader;
csvString += "\n";

var i = 1;	

var level1Concepts = getLevel1Concepts(selectedConcepts);
if (!level1Concepts || level1Concepts < 1)
	lib_Error("Missing any level 1 concepts" + ". Exiting...");

level1Concepts = sortConceptsOnSequenceNo(level1Concepts);

level1Concepts.each(function(lev1Concept) {
	

	console.log(i + ": " + "level " + cConcept_GetProperty(lev1Concept, "grouping-level") + " name: " + lev1Concept.name);
	csvString += lev1Concept.name + "\t" + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(lev1Concept, properties);
	if (i < selectedElements.size())
		csvString += "\n";
	i++;

	var subConcepts = cConcept_getSubConcepts(lev1Concept)
	subConcepts = sortConceptsOnSequenceNo(subConcepts);
	
	//if (!subConcepts || subConcepts.size() < 1)
	//	lib_Error("Missing any level 2 concepts" + ". Exiting...");

	
	if (subConcepts) {
		

		subConcepts.each(function(sub2) {
			// Sjekk if subConcept is aming the selectedConcepts
			if (selectedConcepts.contains(sub2)) {
				console.log("level " + cConcept_GetProperty(sub2, "grouping-level") + " name: " + sub2.name);
				//csvString += sub2.name + "\t" + sub2.name + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(sub2, properties);
				csvString += "\t" + sub2.name + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(sub2, properties);
				if (i < selectedElements.size())
					csvString += "\n";
				i++;
				
				var l3concepts = cConcept_getSubConcepts(sub2);
				l3concepts = sortConceptsOnSequenceNo(l3concepts);
				
				
				if (l3concepts) {
					l3concepts.each(function(sub3) {
						// Sjekk om sub3Concept er med i selectedConcepts
						if (selectedConcepts.contains(sub3)) {
							console.log("level " + cConcept_GetProperty(sub3, "grouping-level") + " name: " + sub3.name);
							//csvString += sub3.name + "\t" + sub2.name + "\t" + sub3.name + "\t" + cConcept_getPropertiesAsExcelRow(sub3, properties);
							csvString += "\t" + "\t" + sub3.name + "\t" + cConcept_getPropertiesAsExcelRow(sub3, properties);
							if (i < selectedElements.size())
								csvString += "\n";
							i++;
						}
					});
				}
			}
		});	
	}
});
		

cClipboard_SetClipboardString(csvString);
//console.log("csvString:\n" + csvString);

console.log("Script completed. You may paste the resulting string into your spreadsheet, e.g. Excel");

**/

/**

// Function to check if one element is graphically contained within another
function isContainedWithin(parentBounds, childBounds) {
    return (
        childBounds.x >= parentBounds.x &&
        childBounds.y >= parentBounds.y &&
        (childBounds.x + childBounds.width) <= (parentBounds.x + parentBounds.width) &&
        (childBounds.y + childBounds.height) <= (parentBounds.y + parentBounds.height)
    );
}

// Sorting function that prioritizes y position, then x position
function sortByYThenX(a, b) {
    var boundsA = a.bounds;
    var boundsB = b.bounds;

    // First, compare by y position
    if (boundsA.y !== boundsB.y) {
        return boundsA.y - boundsB.y; // Sort by y (ascending)
    }

    // If y positions are the same, sort by x position
    return boundsA.x - boundsB.x; // Sort by x (ascending)
}


// Function to check if an element is truly a top-level element
function isTopLevelElement(element, allElements) {
    var elementBounds = element.bounds;

    // Check if the element is contained by any other element in the view
    for (var i = 0; i < allElements.length; i++) {
        var otherElement = allElements[i];
        if (otherElement.id !== element.id) {  // Skip self-comparison
            var otherBounds = otherElement.bounds;
            if (isContainedWithin(otherBounds, elementBounds)) {
                return false; // If the element is contained by another, it is not top-level
            }
        }
    }
    return true; // If no other element contains this element, it is top-level
}

// Recursive function to find all elements graphically contained by the given element, sorted by y first, then x
function findContainedElementsSorted(parentElement, allElements) {
    var parentBounds = parentElement.bounds;

    // Find elements contained within the parent element, but skip self-comparison
    var containedElements = allElements.filter(function(e) {
        if (e.id === parentElement.id) {
            return false; // Skip if the element is the same as the parent
        }
        var childBounds = e.bounds;
        return isContainedWithin(parentBounds, childBounds);
    });

    // Only log if there are contained elements
    if (containedElements.length > 0) {
        console.log("Contained elements for parent:", parentElement.name);
        containedElements.forEach(function(e) {
            console.log(" - " + e.name);
        });
    }

    // If no contained elements are found, return to avoid unnecessary recursion
    if (containedElements.length === 0) {
        return; // Safeguard to stop recursion
    }

    // Sort contained elements by y position, then x position
    containedElements.sort(sortByYThenX);

    // Process each contained element
    containedElements.forEach(function (e) {
        console.log("Element contained by:", parentElement.name, "->", e.name);

        // Recursively check for and sort child elements of the contained element
        findContainedElementsSorted(e, allElements);
    });
}

// Main function to identify and process top-level elements, sorted by y first, then x
function processViewElementsSorted(view) {
    // Get all elements from the view
    var allElements = cView_GetElementsInView(view);

    // Find top-level elements (those not contained by any other element)
    var topLevelElements = allElements.filter(function (element) {
        return isTopLevelElement(element, allElements);
    });

    // Sort top-level elements by y position, then x position
    topLevelElements.sort(sortByYThenX);

    // Log top-level elements for debugging
    console.log("Top-level elements:");
    topLevelElements.forEach(function(e) {
        console.log(" - " + e.name);
    });

    // Process each top-level element
    topLevelElements.forEach(function (element) {
        console.log("Top-level element found:", element.name);

        // Recursively find and process contained elements, sorted by y first, then x
        findContainedElementsSorted(element, allElements);
    });
}

// Start with the current view
var view = CSelection_GetTheSelectedView();
processViewElementsSorted(view);

/*************************************************************************/



/*******************************************  ERIK's RECURSIVE SOLUTION (structure works, but output yetto be fixed)
// Sorting function that prioritizes y position, then x position
function sortByYThenX(a, b) {
    var boundsA = a.bounds;
    var boundsB = b.bounds;

    // First, compare by y position
    if (boundsA.y !== boundsB.y) {
        return boundsA.y - boundsB.y; // Sort by y (ascending)
    }

    // If y positions are the same, sort by x position
    return boundsA.x - boundsB.x; // Sort by x (ascending)
}

// Function to get top-level elements based on composition/aggregation relationships
function getTopLevelElements(view) {
    var elms = cView_GetElementsInView(view);

    if (!elms) {
        console.log("Error: getTopLevelElements");
        return null;
    }

    var topLevelElements = null;

    elms.each(function(e) {
        var doesCompose = false;
        var soleToplevel = true;
        var isTopLevel = true;

        var ownViewRels = $(e).rels();
        ownViewRels.each(function(r) {
            if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.source.id === e.id) {
                doesCompose = true; // The element is the source in a composition or aggregation, so it may contain others
            } else if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.target.id === e.id) {
                soleToplevel = false; // The element is the target in a relationship, so it is contained by another
            }
        });

        // If the element is a source and does not have any incoming composition relationships, it's top-level
        if (doesCompose) {
            ownViewRels.each(function(r) {
                if (r.type == "composition-relationship" && r.target.id === e.id) {
                    isTopLevel = false; // If the element is a target in a composition relationship, it's not top-level
                }
            });
        } else if (!soleToplevel) {
            isTopLevel = false; // If it's not the sole top-level element, it's not top-level
        }

        // If the element is top-level, add it to the list
        if (isTopLevel) {
            if (topLevelElements == null) {
                topLevelElements = $(e);
            } else {
                topLevelElements.add($(e));
            }
        }
    });

    return topLevelElements;
}

// Function to get child elements in the view based on relationships
function getSubElementsInView(parentElement, view) {
    var subElements = null;

    // Get relationships of the parent element
    var ownRels = $(parentElement).rels();

    // Get all elements in the view
    var elmsInView = cView_GetElementsInView(view);

    // Loop through relationships to find children (composition/aggregation relationships)
    ownRels.each(function(r) {
        if ((r.type == "composition-relationship" || r.type == "aggregation-relationship") && r.source.id === parentElement.id) {
            // Check if the target element is also in the current view
            elmsInView.each(function(e) {
                if (e.id === r.target.id) {
                    // Add the target element as a child element
                    if (subElements == null) {
                        subElements = $(e);
                    } else {
                        subElements.add($(e));
                    }
                }
            });
        }
    });

    // Return the visible child elements (if any)
    return subElements;
}

// Recursive function to process contained elements (visible in the view)
function findContainedElementsSortedUsingRelationshipsAndView(parentElement, view) {
    // Get child elements visible in the view
    var subElements = getSubElementsInView(parentElement, view);

    // Only proceed if there are sub-elements
    if (subElements != null && subElements.length > 0) {
        // Sort sub-elements by y position, then x position
        subElements.sort(sortByYThenX);

        // Log the contained elements for debugging
        console.log("Contained elements for parent:", parentElement.name);
        subElements.each(function(e) {
            console.log(" - " + e.name);
        });

        // Recursively process each sub-element
        subElements.each(function(e) {
            console.log("Element contained by:", parentElement.name, "->", e.name);
            findContainedElementsSortedUsingRelationshipsAndView(e, view);
        });
    }
}

// Main function to process the view elements using relationships and view visibility
function processViewElementsUsingRelationshipsAndView(view) {
    // Get top-level elements based on relationships
    var topLevelElements = getTopLevelElements(view);

    if (!topLevelElements) {
        console.log("No top-level elements found");
        return;
    }

    // Sort top-level elements by y position, then x position
    topLevelElements.sort(sortByYThenX);

    // Log top-level elements for debugging
    console.log("Top-level elements:");
    topLevelElements.each(function(e) {
        console.log(" - " + e.name);
    });

    // Process each top-level element
    topLevelElements.each(function(element) {
        console.log("Top-level element found:", element.name);
        findContainedElementsSortedUsingRelationshipsAndView(element, view);
    });
}

// Start with the current view
var view = CSelection_GetTheSelectedView();
processViewElementsUsingRelationshipsAndView(view);

*******************************************  ERIK's RECURSIVE SOLUTION (structure works, but output yetto be fixed) */