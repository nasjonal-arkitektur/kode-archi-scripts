/*
 * Export selection to CSV via clipboard
 */
 
"use strict";

load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");

console.clear();
console.log("Export selection to CSV via clipboard - script starting");



//var selectedConcepts = cModel_GetAllDirectlySelectedConcepts();

var dctConceptTypeFilter = window.prompt("dct:type concept type filter", "capability"); // user-story, epic, capability

var selectedConcepts = CSelection_GetSelectedConcepts("", "", dctConceptTypeFilter);
//var selectedViews = CSelection_GetAllSelectedViews();
//var selectedFolders = CSelection_getSelectedFoldersAndSubfolders();

if (!selectedConcepts)
	lib_Error("No concepts selected. Exiting...");


var csvColumnSpecString = cClipboard_GetClipboardString();
//lib_TestExit("'" + csvColumnSpecString + "'"); // shows there's an extra "\n" after the last ...
csvColumnSpecString = lib_SliceTrailingCharIfPresent(csvColumnSpecString, "\n"); //there's an extra "\n" at the end of the string when copied from Excel!


if (!csvColumnSpecString)
	lib_Error("Missing csvColumnSpecification by clipboard. Please e.g. copy header columns from Excel and try again. Exiting...");

var lines = csvColumnSpecString.split("\n");
var csvHeader = lines[0];

// throwing away any other lines.. (to-do: could give a warning of more than one line)

var properties = csvColumnSpecString.split("\t");

var csvString = ""; 

csvString += "level 1" + "\t" + "level 2" + "\t" + "level 3" + "\t" + csvHeader;
csvString += "\n";

/*
// Sort selectedConcepts based on the name property
selectedConcepts.sort(function(a, b) {
    if (a.name < b.name) return -1;
    if (a.name > b.name) return 1;
    return 0;
});

// Sort selectedConcepts based on the "concept_no" property
selectedConcepts.sort(function(a, b) {
    if (cConcept_GetProperty(a, "concept_no") < cConcept_GetProperty(b, "concept_no")) return -1;
    if (cConcept_GetProperty(a, "concept_no") > cConcept_GetProperty(b, "concept_no")) return 1;
    return 0;
});


// Sort selectedConcepts based on the "digdir:sequence_no" property
selectedConcepts.sort(function(a, b) {
    if (cConcept_GetProperty(a, "digdir:sequence_no") < cConcept_GetProperty(b, "digdir:sequence_no")) return -1;
    if (cConcept_GetProperty(a, "digdir:sequence_no") > cConcept_GetProperty(b, "digdir:sequence_no")) return 1;
    return 0;
});
selectedConcepts.each(function(c) {
	console.log(c.name + ": " + cConcept_GetProperty(c, "digdir:sequence_no"));
});	
lib_TestExit("Testexit");	
*/


var lev1Concepts = 0;
var i = 1;	
selectedConcepts.each(function(c) {
	
	//console.log(i + ": " + c.name);
	



	var level = cConcept_GetProperty(c, "grouping-level");
	
	if (!level)
		lib_Error("Missing required property 'grouping-level' for element " + c.name + ". Exiting...");
	
	if (level == 1) {
		
		lev1Concepts++;
		
		console.log(i + ": " + "level " + level + " name: " + c.name);
		csvString += c.name + "\t" + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(c, properties);
		if (i < selectedConcepts.size())
			csvString += "\n";
		i++;

		var subConcepts = cConcept_getSubConcepts(c);
		
		if (subConcepts) {
			
	
			subConcepts.each(function(sub2) {

				// Sjekk om subConcept er med i selectedConcepts
				if (selectedConcepts.contains(sub2)) {
					console.log("level " + cConcept_GetProperty(sub2, "grouping-level") + " name: " + sub2.name);
					//csvString += c.name + "\t" + sub2.name + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(sub2, properties);
					csvString += "\t" + sub2.name + "\t" + "\t" + cConcept_getPropertiesAsExcelRow(sub2, properties);
					if (i < selectedConcepts.size())
						csvString += "\n";
					i++;
					
					var l3concepts = cConcept_getSubConcepts(sub2);
					if (l3concepts) {
						l3concepts.each(function(sub3) {
							// Sjekk om sub3Concept er med i selectedConcepts
							if (selectedConcepts.contains(sub3)) {
								console.log("level " + cConcept_GetProperty(sub3, "grouping-level") + " name: " + sub3.name);
								//csvString += c.name + "\t" + sub2.name + "\t" + sub3.name + "\t" + cConcept_getPropertiesAsExcelRow(sub3, properties);
								csvString += "\t" + "\t" + sub3.name + "\t" + cConcept_getPropertiesAsExcelRow(sub3, properties);
								if (i < selectedConcepts.size())
									csvString += "\n";
								i++;
							}
						});
					}
				}
			});
		}	

	}
	
	
	
	//lib_TestExit("Testexit");	
	
});	

if (lev1Concepts < 1)
	lib_Error("Missing any level 1 concepts" + ". Exiting...");

cClipboard_SetClipboardString(csvString);
//console.log("csvString:\n" + csvString);

console.log("Script completed. You may paste the resulting string into your spreadsheet, e.g. Excel");
