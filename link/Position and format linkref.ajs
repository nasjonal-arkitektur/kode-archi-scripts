/*
 * New Archi Script
 */
load(__DIR__ + "../common/Constants.ajs");
load(__DIR__ + "../common/c_Model.ajs");
load(__DIR__ + "../common/c_View.ajs");
load(__DIR__ + "../common/c_Clipboard.ajs");
load(__DIR__ + "../common/c_Selection.ajs");
load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Book.ajs");
load(__DIR__ + "../common/c_Filesystem.ajs");
load(__DIR__ + "../common/c_AntoraModule.ajs");


console.show();
console.clear();
console.log("Position and format linkref");


var selectedOccurences = CSelection_GetDirectlySelectedOccurences();

if (selectedOccurences.size() < 1) {
	window.alert("No objects selected. Please select an element. Exiting...");
	exit();
}

/*
else if (selectedOccurences.size() > 1) {
	window.alert("More than one object selected. Please select only one element. Exiting...");
	exit();
}
*/
	
var selectedOccurence = null;
$(selectedOccurences).each(function (selectedOccurence) {
	//console.log(selectedOccurence.name);

	var previousElm = null;
	$(selectedOccurence).children().each(function (viewRef) {
		

		console.log("View ref: " + viewRef.name + " (" + viewRef.type + ")" );

		if ((viewRef) && ((viewRef.type == 'archimate-diagram-model') || (viewRef.type == 'sketch-model') || (viewRef.type == 'canvas-model'))) {
			
			if (previousElm)
				lib_TestExit("Sorry, you may currently only add one viewref with this script");

			// Find the actual linked views
			var viewsCollection = $('archimate-diagram-model');
			viewsCollection.add($('sketch-model'));
			viewsCollection.add($('canvas-model'));
			
			var duplicate = false;
			var alreadyFound = false;
			viewsCollection.each(function (linkedView) {
				
				//console.log("a View: " + linkedView.name + ": " + linkedView.id);			
				// this doesn't cater for duplicate view names, sorry
				if (linkedView.name === viewRef.name) {
					//viewList.push([viewRef, linkedView]);
					console.log("--viewRef.name: " + viewRef.name + ": " + viewRef.id);
	
					previousElm = sizeAndPostionViewRef(selectedOccurence, viewRef, linkedView, previousElm );
					
					
					if (alreadyFound) {
						duplicate = true;
						console.log("Problem: Found more than one view with the name: '" + linkedView.name + "'. You need to resolve this before rerunning the script. Sorry. Exiting..." );
						window.alert("Problem: Found more than one view with the name: '" + linkedView.name + "'. You need to resolve this before rerunning the script. Sorry. Exiting..." );
						//exit();
					}
					else
					 alreadyFound = true;
					
				}
			});
		}


	});
});


function sizeAndPostionViewRef(parentObj, viewRefObj, viewObj, makeRelationFromElm) {

	var thisView = viewRefObj.view;

	console.log("Transformimg " + viewRefObj.name);
	var concept= model.createElement("representation", viewRefObj.name);
	concept.documentation = viewObj.documentation;
	
	console.log("viewRefObj.x=" + viewRefObj.bounds.x);
	console.log("viewRefObj.y=" + viewRefObj.bounds.y);
	console.log("viewRefObj.width=" + viewRefObj.bounds.width);
	console.log("viewRefObj.height=" + viewRefObj.bounds.y);
	
	var elm = parentObj;


	var refSizeX = 18;
	var refSizeY = 18;
	
	// adjust xy coordinates relative to containing parent objects
	var childElm = elm;
	var x = childElm.bounds.x;
	var y = childElm.bounds.y;
	
	var parentElm = cView_GetContainingElementIfExists(thisView, childElm);
	while (parentElm ) {
		console.log("parentElm = " + parentElm.name);
		x += parentElm.bounds.x;
		y += parentElm.bounds.y;
		parentElm = cView_GetContainingElementIfExists(thisView, parentElm);
	}

		
	//var newViewRefObj = thisView.createViewReference(viewRefObj.refView, elm.bounds.x + elm.bounds.width - refSizeX, 
	//							elm.bounds.y + elm.bounds.height - refSizeY, 
	//							refSizeX, refSizeY, true);
								
								
	var newViewRefObj = thisView.createViewReference(viewRefObj.refView, 
								x + elm.bounds.width - refSizeX,
								y + elm.bounds.height - refSizeY, 
								refSizeX, refSizeY, true);								
								
	cConcept_SetProperty(elm.concept, const_prop_view_reference, viewRefObj.refView.id);
								
	newViewRefObj.labelExpression = " "; // prevent object name to disturb the image
	newViewRefObj.opacity = 0;
	newViewRefObj.outlineOpacity = 0;	
								
	viewRefObj.delete();

	return newViewRefObj;

}


