load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");

console.show();
console.clear();
console.log("Create or update Github issues");

const useBetaTaskList = true;
var const_caption_GithubIssueID = "GithubIssueID:";
var const_caption_ArchiConceptID = "ArchiConceptID:";
var const_autofill_placeholder = "[to be autofilled]";
const const_githubInitialCommentId = "github_initial_comment_id";

//var gh_repo_owner = "altinn"; var gh_repo_name = "testrepo-melding-formidling";
//var gh_repo_owner = "githagen"; var gh_repo_name = "altinn-test-repo";
//var gh_repo_owner = "erikhag1"; var gh_repo_name = "altinn-test-repo";
var gh_repo_owner = "altinn"; var gh_repo_name = "altinn-broker";
var createdCount = 0;
var updatedCount = 0;

// Powershell command to set system enironment variabels: [Environment]::SetEnvironmentVariable("erikhag1_classical_token_1", "SystemValue", "Machine")
//var TOKEN = java.lang.System.getenv("MY_PAT"); // all of erikhag1 owned repos
var TOKEN = java.lang.System.getenv("erikhag1_classical_token_1"); // classical PAT
if (!TOKEN)
	lib_Error("TOKEN is null, Exiting...");
//console.log("Token Length: " + (TOKEN ? TOKEN.length : "Token is null"));
//console.log("TOKEN:" + TOKEN);

function NOT_YET_WORKING_createGithubLabel(labelName, labelColor, labelDescription) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");

    // Først, sjekk om labelen allerede eksisterer
    var query = `
    {
      repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
        label(name: "${labelName}") {
          id
        }
      }
    }
    `;

    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);

    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: query }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    var parsedResponse = JSON.parse(response);
    var labelId = parsedResponse.data.repository.label ? parsedResponse.data.repository.label.id : null;

    // Hvis labelen ikke eksisterer, opprett den
    if (!labelId) {
        var mutation = `
        mutation {
          createLabel(input: {
            repositoryId: "${repoId}",
            name: "${labelName}",
            color: "${labelColor}",
            description: "${labelDescription}"
          }) {
            label {
              id
              name
              color
              description
            }
          }
        }
        `;

        // Opprett en ny HttpURLConnection for denne forespørselen
        connection = HttpURLConnection.class.cast(url.openConnection());
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);

        writer = new OutputStreamWriter(connection.getOutputStream());
        writer.write(JSON.stringify({ query: mutation }));
        writer.close();

        reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        response = "";
        while ((line = reader.readLine()) !== null) {
            response += line;
        }
        reader.close();

        parsedResponse = JSON.parse(response);
        if (parsedResponse.data.createLabel && parsedResponse.data.createLabel.label) {
            return parsedResponse.data.createLabel.label;
        } else {
            console.error("Failed to create label:", JSON.stringify(parsedResponse, null, 2));
            return null;
        }
    } else {
        console.log("Label with name", labelName, "already exists.");
        return null;
    }
}



function fetchLabels() {
    //see global var: var gh_repo_owner = "githagen"; // Erstatt med ditt brukernavn
    //see global var:var gh_repo_name = "altinn-test-repo"; // Erstatt med ditt repositoriums navn

    var query = `
    {
      repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
        labels(first: 100) {
          nodes {
            id
            name
          }
        }
      }
    }
    `;

    var response = sendGraphQLRequest(query);
    if (response.data && response.data.repository && response.data.repository.labels) {
        return response.data.repository.labels.nodes;
    } else {
        console.error("Failed to fetch labels:" + response);
        return [];
    }
}

function fetchLabelIdByName(labelName) {

    var query = `
    {
      repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
        label(name: "${labelName}") {
          id
        }
      }
    }
    `;

    var response = sendGraphQLRequest(query);
    if (response.data && response.data.repository && response.data.repository.label) {
        return response.data.repository.label.id;
    } else {
        console.error("Failed to fetch label ID for label with name: " + labelName);
        return null;
    }
}

function fetchLabelIdsByNames(labelNames) {
    var labelIds = [];
    for (let name of labelNames) {
        let id = fetchLabelIdByName(name);
        if (id) {
            labelIds.push(id);CreateOrUpdateGithubIssueFromArchiConcept
        }
    }
    return labelIds;
}


function setLabelsForIssue(issueId, labels) {

    var mutation = `
    mutation {
        addLabelsToLabelable(input: {labelableId: "${issueId}", labelIds: ${JSON.stringify(labels)}}) {
            clientMutationId
        }
    }
    `;

    var response = sendGraphQLRequest(mutation);
    if (response.data && response.data.addLabelsToLabelable) {
        return response.data.addLabelsToLabelable.clientMutationId;
    } else {
        console.error("Failed to set labels for issue with number: " + issueNumber);
        return null;
    }
}



function createCommentOnIssue(issueId, commentBody) {
    var mutation = `
    mutation {
      addComment(input: {
        subjectId: "${issueId}",
        body: "${commentBody}"
      }) {
        commentEdge {
          node {
            id
            body
          }
        }
      }
    }
    `;

    return sendGraphQLRequest(mutation);
}

function updateComment(commentId, updatedBody) {
    var mutation = `
    mutation {
      updateIssueComment(input: {
        id: "${commentId}",
        body: "${updatedBody}"
      }) {
        issueComment {
          id
          body
        }
      }
    }
    `;

    return sendGraphQLRequest(mutation);
}

function fetchCommentText(commentId) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");

    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);

    var query = `
    {
      node(id: "${commentId}") {
        ... on IssueComment {
          body
        }
      }
    }
    `;

    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: query }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    var parsedResponse = JSON.parse(response);
    if (parsedResponse.data && parsedResponse.data.node && parsedResponse.data.node.body) {
        return parsedResponse.data.node.body;
    } else {
        //console.error("Failed to fetch comment text:" + JSON.stringify(parsedResponse, null, 2));
        return null;
    }
}


function fetchCommentsForIssue(issueId) {
    var query = `
    {
      node(id: "${issueId}") {
        ... on Issue {
          comments(first: 100) {
            nodes {
              id
              body
              author {
                login
              }
            }
          }
        }
      }
    }
    `;

    var response = sendGraphQLRequest(query);

    // Legg til feilhåndtering her
    if (!response || !response.data || !response.data.node) {
        console.error("Failed to fetch comments for issue:", issueId);
        console.error("Response:", JSON.stringify(response));
        return null;
    }

    return response;
}


function issueHasComments(issueId) {
    var commentsResponse = fetchCommentsForIssue(issueId);
    
    // Sjekk om vi fikk en gyldig respons
    if (!commentsResponse) {
        return false;
    }

    var comments = commentsResponse.data.node.comments.nodes;
    return comments.length > 0;
}

function deleteComment(commentId) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");

    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);

    var mutation = `
    mutation {
      deleteIssueComment(input: {id: "${commentId}"}) {
        clientMutationId
      }
    }
    `;

    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: mutation }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    return JSON.parse(response);
}


function getRateLimits(doLogResult) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");
    
    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);
    
    // Send a simple GraphQL query to get the viewer's login (just as a placeholder query)
    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: "{ viewer { login } }" }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    var result =  {
        remaining: connection.getHeaderField("X-RateLimit-Remaining"),
        reset: new Date(parseInt(connection.getHeaderField("X-RateLimit-Reset")) * 1000).toLocaleString()
    };
	
	if (doLogResult) {
		console.log("GitHub API requests remaining: " + result.remaining);
		console.log("Rate limit will be reset at: " + result.reset);
	}
	
	return result;
}

function isIssueOpen(issueId) {
    var query = `
    {
      repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
        issue(number: ${issueId}) {
          state
        }
      }
    }
    `;

    var response = sendGraphQLRequest(query);
    if (response.data && response.data.repository && response.data.repository.issue) {
        return response.data.repository.issue.state === "OPEN";
    } else {
        console.error("Failed to fetch issue state:" + response);
        return false;
    }
}


function getopenIssueWithArchiGUID(archiGUID) {
    console.log("Sending GraphQL request to fetch issues with ArchiGUID:", archiGUID);
    
    var query = `
    {
      repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
        issues(first: 100, orderBy: {field: CREATED_AT, direction: DESC}) {
          nodes {
            id
            state
            title
            body
          }
        }
      }
    }
    `;

	//console.log("Sending GraphQL request to fetch issues with ArchiGUID:", archiGUID);
    var response = sendGraphQLRequest(query);
    if (response.errors) {
        console.error("Error in GraphQL response:" + JSON.stringify(response));
        return null;
    }

    if (response.data && response.data.repository && response.data.repository.issues) {
        var issues = response.data.repository.issues.nodes;
        for (let i = 0; i < issues.length; i++) {
            if (issues[i].body.includes(archiGUID) && issues[i].state === "OPEN") {
                return issues[i];
            }
        }
    }

    console.log("No matching issue found for ArchiGUID:", archiGUID);
    return null;
}


function getopenIssueWithPreviousGHGuid(issueId) {
	
	// DENNE FUNKSJONEN BØR OPPDATERES FOR Å KUNNE RETURNERE HELE OBJEKTET???
	
	
    var query = `
    {
      node(id: "${issueId}") {
        ... on Issue {
          id
          state
          title
          body
        }
      }
    }
    `;

    var response = sendGraphQLRequest(query);
    if (response.data && response.data.node && response.data.node.state) {
        return response.data.node.state === "OPEN" ? response.data.node : null;
    } else {
        lib_Error("Failed to fetch issue status: " + JSON.stringify(response));
        return null;
    }
}

function sendGraphQLRequest(query) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");
    
    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);
    
    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: query }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    // Log the GraphQL rate limit remaining
	//var rateLimits = getRateLimits();
	//console.log("GitHub API requests remaining: " + rateLimits.remaining);
	//console.log("Rate limit will be reset at: " + rateLimits.reset);

    return JSON.parse(response);
}



var query = `
{
  repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
    id
    name
  }
}`;

var response = sendGraphQLRequest(query).data.repository;
var repoId = response.id;
var fetchedRepoName = response.name;

console.log("Fetched repository name:", fetchedRepoName);
console.log("RepoId: " + repoId);


function GenerateGithubIssueDocumentation(archiGithubIssue, openIssueWithArchiGUID) {
	
	archiGithubIssue.documentation = "";

	archiGithubIssue.documentation += "\n\n## Users view\n";
	archiGithubIssue.documentation += "\nTitle: " + "**" + archiGithubIssue.name + "**";
	archiGithubIssue.documentation += "\nUser role(s): " + cConcept_GetProperty(archiGithubIssue, "role");	
	archiGithubIssue.documentation += "\nUsers value statement(s): "
	archiGithubIssue.documentation += "\n" + cConcept_GetProperty(archiGithubIssue, "value_statement");



    archiGithubIssue.documentation += "\n\n## Vendors view";
	archiGithubIssue.documentation += "\n### Description";
	archiGithubIssue.documentation += "\n#### High level features (capabilities):";
	archiGithubIssue.documentation += "\n * " + cConcept_GetProperty(archiGithubIssue, "system-epics");
	
	archiGithubIssue.documentation += "\n#### Additional information";
	archiGithubIssue.documentation += "\nTBD"; // TBD!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	if (useBetaTaskList) {
		archiGithubIssue.documentation += "\n\n```[tasklist]";
		archiGithubIssue.documentation += "\n### Features ";
		if (cConcept_GetProperty(archiGithubIssue, "system-features"))
			archiGithubIssue.documentation += "\n" + cConcept_GetProperty(archiGithubIssue, "system-features");
		archiGithubIssue.documentation += "\n```";
	} 
	else {		
		archiGithubIssue.documentation += cConcept_GetProperty(archiGithubIssue, "system-features");
	}
	

	if (cConcept_GetProperty(archiGithubIssue, "issue-tasks") ) {
		if (useBetaTaskList) {
			archiGithubIssue.documentation += "\n\n```[tasklist]";
			archiGithubIssue.documentation += "\n### Work items";
			archiGithubIssue.documentation += "\n" + cConcept_GetProperty(archiGithubIssue, "issue-tasks");
			archiGithubIssue.documentation += "\n```";
		} 
		else {
			archiGithubIssue.documentation += "\n### Work items";
			archiGithubIssue.documentation += cConcept_GetProperty(archiGithubIssue, "issue-tasks");
		}
	} 
	else {
		if (useBetaTaskList) {
			
			archiGithubIssue.documentation += "\n\n```[tasklist]";
			archiGithubIssue.documentation += "\n### Work items\n";			
			//archiGithubIssue.documentation += "\n- [ ] Task 1";
			archiGithubIssue.documentation += "\n```";
		} 
		else {
			archiGithubIssue.documentation += "\n### Work items";
			archiGithubIssue.documentation += "\nExample:";
			archiGithubIssue.documentation += "\n- [x] Completed task";
			archiGithubIssue.documentation += "\n- [ ] Incompleted task";
		}
	}
	
	//archiGithubIssue.documentation += "\n\n### User stories\n";		
	//lib_TestExit(archiGithubIssue.documentation);
	
	
	archiGithubIssue.documentation += "\n\n## Item attributes\n";
	archiGithubIssue.documentation += "\n\n_Note: Automatically updated properties, not intended for change by you;)_\n";	
	archiGithubIssue.documentation += "\n" + "_" + "Issue type: " + cConcept_GetProperty(archiGithubIssue, const_prop_dct_type) + "_";
	archiGithubIssue.documentation += "\n" + "_" + "Concept no: " + cConcept_GetProperty(archiGithubIssue, "concept_no") + "_";
	archiGithubIssue.documentation += "\n" + "_" + "Stage: " + cConcept_GetProperty(archiGithubIssue, "stage") + "_";
	
    archiGithubIssue.documentation += "\n" + "_" + const_caption_ArchiConceptID + " " + archiGithubIssue.id + "_";
    if (openIssueWithArchiGUID) 
		archiGithubIssue.documentation += "\n" + "_" + const_caption_GithubIssueID + " " + openIssueWithArchiGUID.id + "_";
	else
		archiGithubIssue.documentation += "\n" + "_" + const_caption_GithubIssueID + " " + const_autofill_placeholder + "_";
}


function CreateOrUpdateGithubIssueFromArchiConcept(archiGithubIssue) {
	
	var archiGUID = archiGithubIssue.id;
    var openIssueWithArchiGUID = archiGUID ? getopenIssueWithArchiGUID(archiGUID) : null;
    if (openIssueWithArchiGUID) {
        console.log("Found an open issue with id=" + openIssueWithArchiGUID.id + " matching Archi Object ID=" + archiGithubIssue.id);
		cConcept_SetProperty(archiGithubIssue, const_prop_githubIssueGUID, openIssueWithArchiGUID.id);
		
    }
	else {
		
		
	}
	
	
	
    //var previousGHGuid = cConcept_GetProperty(archiGithubIssue, const_prop_githubIssueGUID);
	//var openIssueWithPreviousGHGuid = previousGHGuid ? getopenIssueWithPreviousGHGuid(previousGHGuid) : null;
	//console.log("Value of openIssueWithPreviousGHGuid:", openIssueWithPreviousGHGuid);
	
	var prefix = "";
	if (archiGithubIssue.concept.type === "epic") 
		prefix = "E";
	else if (archiGithubIssue.concept.type === "capability")
		prefix = "C";	
	
    var nameLabel = "[" ;
	//nameLabel += prefix + cConcept_GetProperty(archiGithubIssue, "concept_no") + "-";
	nameLabel += cConcept_GetProperty(archiGithubIssue, "role");
	nameLabel +=  "] ";
	nameLabel += archiGithubIssue.name;
		
	title = nameLabel.replace(/"/g, '\\"'); 
	
	GenerateGithubIssueDocumentation(archiGithubIssue, openIssueWithArchiGUID);
	
	
    //var issueBody = "### Description\n\n";
	var issueBody = "";
    issueBody += archiGithubIssue.documentation ? archiGithubIssue.documentation.replace(/\n/g, "\\n").replace(/"/g, '\\"') : "No description provided."; 
 
    var mutation;
	if (openIssueWithArchiGUID) {
		// Oppdater eksisterende åpent issue
		updatedCount++;
		mutation = `
		mutation {
		  updateIssue(input: {
			id: "${openIssueWithArchiGUID.id}",
			title: "${title}",
			body: "${issueBody}"
		  }) {
			issue {
			  id
			  title
			  body
			}
		  }
		}
		`;
	} else {
		// Opprett nytt issue (enten fordi det ikke finnes et eksisterende issue, eller fordi det eksisterende issuet er lukket)
		createdCount++;
		mutation = `
		mutation {
		  createIssue(input: {
			repositoryId: "${repoId}", 
			title: "${title}", 
			body: "${issueBody}",
		  }) {
			issue {
			  id
			  title
			  body
			}
		  }
		}
		`;
	}


    var response = sendGraphQLRequest(mutation);
 

	var needToWait = true;
	var i = 0;
	var secondsToWait = 65;
	var timesToRetry = 2;
	while (needToWait) {
		if (response.errors && response.errors[0].message === "was submitted too quickly") {
			
		
			console.log("Rate limit hit, assuming per minute request limit (of 20?), so waiting " + secondsToWait + " seconds...");
			var rateLimits = getRateLimits(true);
			java.lang.Thread.sleep(secondsToWait * 1000);
			// Retry the request
			response = sendGraphQLRequest(mutation);
		}
		else
			needToWait = false;
			
		if (i++ > timesToRetry)
			lib_Error("Retried sendGraphQLRequest to github several times. Consider increasing the secondsToWait value in the script?");
	}

	var existingIssueGUID = null;
	var resultingGithubIssueGUID = null;
	console.log("Evaluating response conditions...");
	if (response.data) {
		console.log("Checking if issue should be updated...");
		if (openIssueWithArchiGUID && response.data.updateIssue && response.data.updateIssue.issue) {
			existingIssueGUID = response.data.updateIssue.issue.id; 
			
				if (openIssueWithArchiGUID.id != existingIssueGUID) // verify that this works as expected
					lib_Error("Unexpected verification result! openIssueWithArchiGUID=" + openIssueWithArchiGUID.id + " should be same as existingIssueGUID=" + existingIssueGUID + "! Exiting...");
					
			cConcept_SetProperty(archiGithubIssue, const_prop_githubIssueGUID, existingIssueGUID);
			console.log("Issue with ID:" + existingIssueGUID +  " successfully updated");
			
			resultingGithubIssueGUID = existingIssueGUID;

		} 
		else {
			console.log("Checking if a new issue should be created...");
			if (!openIssueWithArchiGUID && response.data.createIssue && response.data.createIssue.issue) {
				var newIssueGUID = response.data.createIssue.issue.id;
				updateIssueWithGraphQLID(newIssueGUID, issueBody);
				console.log("Issue created successfully with ID:", newIssueGUID);
				resultingGithubIssueGUID = newIssueGUID;
			} 
			else {
				console.log("Unexpected response structure:", JSON.stringify(response, null, 2));
				if (response.errors && response.errors.length > 0) {
					console.error("Errors from GitHub:" + JSON.stringify(response.errors, null, 2));
				}
				lib_Error("Script aborting due to unexpected error");
			}
		}
	}
	
	// add or update initial comment
	var initialCommentViaArchi = cConcept_GetProperty(archiGithubIssue, "notes");
	var ghCommentId = cConcept_GetProperty(archiGithubIssue, const_githubInitialCommentId);
	if (ghCommentId && !initialCommentViaArchi) {
		//initialCommentViaArchi = "_Initial comment deleted in Archi (so consider delting this comment also in github vs. restoring a previously gitgub edited note)_"
		console.error("Warning: Deleting initial github comment, considering Archi master for the initial comment.");
		if (fetchCommentText(ghCommentId) )
			console.error(" Comment was:\n" + fetchCommentText(ghCommentId));
		deleteComment(ghCommentId);
	}
	
	var hasComments = true;
    if (initialCommentViaArchi) {
        if (openIssueWithArchiGUID) {

			if (!existingIssueGUID)
				lib_Error("Unexpected missing existingIssueGUID");
			
			if (issueHasComments(existingIssueGUID) ) {
				console.log("Updating initial comment:" + initialCommentViaArchi);
				// Oppdater eksisterende kommentar 
				ghCommentId = cConcept_GetProperty(archiGithubIssue, const_githubInitialCommentId);
				if (ghCommentId)
					updateComment(ghCommentId, initialCommentViaArchi);
				else
					lib_TestExit("Failed to find previos commentId, so need to delete previous initial comment? Work in progress...");
				}
			else {
				hasComments = false;
				console.log("Issue has no comments.");
				// Opprett ny kommentar

				var response = createCommentOnIssue(existingIssueGUID, initialCommentViaArchi);
				var newGhCommentId = response.data.addComment.commentEdge.node.id;
				cConcept_SetProperty(archiGithubIssue, const_githubInitialCommentId, newGhCommentId);
				console.log("Created initial comment om existing github issue with id:" + newGhCommentId);
			
			}

			
        } else {
            // Opprett ny kommentar
			var newIssueId = response.data.createIssue.issue.id;
			var response = createCommentOnIssue(newIssueId, initialCommentViaArchi);
			var newGhCommentId = response.data.addComment.commentEdge.node.id;
			cConcept_SetProperty(archiGithubIssue, const_githubInitialCommentId, newGhCommentId);
			console.log("Created initial comment with id:" + newGhCommentId);

        }
    }
	
	var labelNamesToAttach = ["kind/epic", "status/draft"]; // "area/messaging","solution/broker"
	var labelIdsToAttach = fetchLabelIdsByNames(labelNamesToAttach);
	var result = setLabelsForIssue(resultingGithubIssueGUID, labelIdsToAttach);

	
}

function updateIssueWithGraphQLID(graphQLId, originalBody) {
    // Regex for å finne den eksisterende "const_caption_GithubIssueID"-linjen med const_autofill_placeholder-placeholderen
	var regex = new RegExp("(\\n- \\*\\*GraphQL ID\\*\\*: )" + const_autofill_placeholder);
	// Erstatt placeholderen med den faktiske graphQLId-verdien
    var updatedBody = originalBody.replace(regex, `$1${graphQLId}`);

    var query = `
    mutation {
      updateIssue(input: {
        id: "${graphQLId}",
        body: "${updatedBody}"
      }) {
        issue {
          id
          title
          body
        }
      }
    }
    `;

    return sendGraphQLRequest(query);
}


function processConcepts(concepts) {
	
	//var sortedConcepts = lib_SortConcepts(concepts, "concept_no"); // Erik TODO: Softcode hardcoded value
	//if (!sortedConcepts)
	//	lib_Error("Unexpected null value");

	// Sort the Concepts based on the "concept_no" property
	/*
	selectedConcepts.sort(function(a, b) {
		if (cConcept_GetProperty(a, "concept_no") < cConcept_GetProperty(b, "concept_no")) return -1;
		if (cConcept_GetProperty(a, "concept_no") > cConcept_GetProperty(b, "concept_no")) return 1;
		return 0;
	});
	*/
	
	selectedConcepts.sort(function(a, b) {
		let aProperty = cConcept_GetProperty(a, "concept_no");
		let bProperty = cConcept_GetProperty(b, "concept_no");

		// Check if the properties are numeric
		let isNumericA = !isNaN(aProperty) && !isNaN(parseFloat(aProperty));
		let isNumericB = !isNaN(bProperty) && !isNaN(parseFloat(bProperty));

		// If both properties are numeric, convert them to numbers for comparison
		if (isNumericA && isNumericB) {
			return parseFloat(aProperty) - parseFloat(bProperty);
		}

		// If not numeric, compare as strings
		if (aProperty < bProperty) return -1;
		if (aProperty > bProperty) return 1;
		return 0;
	});	
	
	
    for (let i = 0; i < concepts.length; i++) {
        console.log("\nConcept name: " + concepts[i].name);
        CreateOrUpdateGithubIssueFromArchiConcept(concepts[i]);
    }
}

var dctConceptTypeFilter = window.prompt("dct:type concept type filter", "epic"); //capability or epic
if (!dctConceptTypeFilter) {
	let confirmed = window.confirm("Proceed to process all selected elements without filtering on dct:type?");
	if (!confirmed)
		lib_Error("Cancelled by user. Exiting...");;
}


function ghLabelsexperiment() {
	
	var labels = fetchLabels();
	//console.log("All labels: \n\n"+ JSON.stringify(labels, null, 2));
	
	
	var labelName = "bug"; // Erstatt med navnet på labelen du vil hente
	var labelId = fetchLabelIdByName(labelName);
	console.log("Requested labelId: ", labelId);

}
//ghLabelsexperiment();
//lib_TestExit("Exiting after experiment...");

/*
// Start out by basic configuration (to be moved to a function)
var labelName = "kind/epic";
var labelColor = "#1D76DB"; // Hex-kode uten '#'
var labelDescription = "Din labelbeskrivelse her";
var newLabel = NOT_YET_WORKING_createGithubLabel(labelName, labelColor, labelDescription);
if (newLabel)
	console.log("Created new label: " + newLabel);
*/


var selectedConcepts = CSelection_GetSelectedConcepts("", "", dctConceptTypeFilter);
if (!selectedConcepts || selectedConcepts.size() === 0)
	lib_Error("No concepts selected. Hint: Check dct:type property. Exiting...");




console.log("Processing " + selectedConcepts.length + " concepts...");
processConcepts(selectedConcepts);
console.log("Processed " + selectedConcepts.length + " concepts");
console.log("Created " + createdCount + " new issues and updated " + updatedCount + " existing issues");



// Log the final rate limits
var finalRateLimits = getRateLimits(true);
//console.log("GitHub API requests remaining: " + finalRateLimits.remaining);
//console.log("Rate limit will be reset at: " + finalRateLimits.reset);


console.log("Script completed");