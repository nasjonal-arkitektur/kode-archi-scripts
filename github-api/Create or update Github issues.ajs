load(__DIR__ + "../common/c_Concept.ajs");
load(__DIR__ + "../common/c_Selection.ajs");

console.show();
console.clear();
console.log("Create or update Github issues");

var TOKEN = java.lang.System.getenv("MY_PAT"); // all of erikhag1 owned repos
//var TOKEN = java.lang.System.getenv("eriks_altinn_testrepo_pat"); // altinn owned testrepo-melding-formidling


//console.log("Token Length: " + (TOKEN ? TOKEN.length : "Token is null"));

function getRateLimits(doLogResult) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");
    
    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);
    
    // Send a simple GraphQL query to get the viewer's login (just as a placeholder query)
    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: "{ viewer { login } }" }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    var result =  {
        remaining: connection.getHeaderField("X-RateLimit-Remaining"),
        reset: new Date(parseInt(connection.getHeaderField("X-RateLimit-Reset")) * 1000).toLocaleString()
    };
	
	if (doLogResult) {
		console.log("GitHub API requests remaining: " + result.remaining);
		console.log("Rate limit will be reset at: " + result.reset);
	}
	
	return result;
}



function sendGraphQLRequest(query) {
    var URL = Java.type("java.net.URL");
    var HttpURLConnection = Java.type("java.net.HttpURLConnection");
    var OutputStreamWriter = Java.type("java.io.OutputStreamWriter");
    var BufferedReader = Java.type("java.io.BufferedReader");
    var InputStreamReader = Java.type("java.io.InputStreamReader");
    
    var url = new URL("https://api.github.com/graphql");
    var connection = HttpURLConnection.class.cast(url.openConnection());
    connection.setRequestMethod("POST");
    connection.setRequestProperty("Authorization", "Bearer " + TOKEN);
    connection.setRequestProperty("Content-Type", "application/json");
    connection.setDoOutput(true);
    
    var writer = new OutputStreamWriter(connection.getOutputStream());
    writer.write(JSON.stringify({ query: query }));
    writer.close();

    var reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
    var response = "";
    var line;
    while ((line = reader.readLine()) !== null) {
        response += line;
    }
    reader.close();

    // Log the GraphQL rate limit remaining
	//var rateLimits = getRateLimits();
	//console.log("GitHub API requests remaining: " + rateLimits.remaining);
	//console.log("Rate limit will be reset at: " + rateLimits.reset);

    return JSON.parse(response);
}

var gh_repo_owner = "githagen"; var gh_repo_name = "altinn-test-repo";
//var gh_repo_owner = "erikhag1"; var gh_repo_name = "altinn-test-repo";
//var gh_repo_owner = "altinn"; var gh_repo_name = "testrepo-melding-formidling";

var query = `
{
  repository(owner: "${gh_repo_owner}", name: "${gh_repo_name}") {
    id
    name
  }
}`;

var response = sendGraphQLRequest(query).data.repository;
var repoId = response.id;
var fetchedRepoName = response.name;

console.log("Fetched repository name:", fetchedRepoName);
console.log("RepoId: " + repoId);


function CreateOrUpdateGithubIssueFromArchiConcept(ghIssue) {
    var archiGUID = ghIssue.id;
    var gitGUID = cConcept_GetProperty(ghIssue, const_prop_githubIssueGUID);
	
	
	gitGUID = null; // temp to skip update!!!!!!!!!!!!!!!!!!!!!
	
    
    var title = ghIssue.name.replace(/"/g, '\\"'); 
    var issueBody = "### Description\n\n";
	
    issueBody += ghIssue.documentation ? ghIssue.documentation.replace(/\n/g, "\\n").replace(/"/g, '\\"') : "No description provided."; 
    //issueBody += "\n\n### In scope\n\n_No response_";
    //issueBody += "\n\n### Out of scope\n\n_No response_";
	issueBody += "\n\n### Tasks\n\n_No response_";
    issueBody += "\n\n### Additional Information\n";
    issueBody += "\n- **Archi Object ID**: " + archiGUID;
    if (gitGUID) issueBody += "\n- **GraphQL ID**: " + gitGUID;
    
    var mutation;
    if (gitGUID) {
        // Update existing issue
        mutation = `
        mutation {
          updateIssue(input: {
            id: "${gitGUID}",
            title: "${title}",
            body: "${issueBody}"
          }) {
            issue {
              id
              title
              body
            }
          }
        }
        `;
    } else {
        // Create new issue
        mutation = `
        mutation {
          createIssue(input: {
            repositoryId: "${repoId}", 
            title: "${title}", 
            body: "${issueBody}",
          }) {
            issue {
              id
              title
              body
            }
          }
        }
        `;
    }

    var response = sendGraphQLRequest(mutation);
 

	var needToWait = true;
	var i = 0;
	var secondsToWait = 65;
	var timesToRetry = 2;
	while (needToWait) {
		if (response.errors && response.errors[0].message === "was submitted too quickly") {
			
		
			console.log("Rate limit hit, assuming per minute request limit (of 20?), so waiting " + secondsToWait + " seconds...");
			var rateLimits = getRateLimits(true);
			java.lang.Thread.sleep(secondsToWait * 1000);
			// Retry the request
			response = sendGraphQLRequest(mutation);
		}
		else
			needToWait = false;
			
		if (i++ > timesToRetry)
			lib_Error("Retried sendGraphQLRequest to github several times. Consider increasing the secondsToWait value in the script?");
	}


    if (response.data) {
		
		if (gitGUID && response.data.updateIssue && response.data.updateIssue.issue) {
			var issueGUID = response.data.updateIssue.issue.id;
			cConcept_SetProperty(ghIssue, const_prop_githubIssueGUID, issueGUID);
			console.log("Issue with ID:" + issueGUID +  " successfully updated");
		} 
		else if (!gitGUID && response.data.createIssue && response.data.createIssue.issue) {
			var issueGUID = response.data.createIssue.issue.id;
			updateIssueWithGraphQLID(issueGUID, issueGUID, issueBody);
			console.log("Issue created successfully with ID:", issueGUID);
		} 
		else {
			//console.log("Error creating/updating the issue. Unexpected response:", JSON.stringify(response.data));
			console.log("Unexpected response structure:", JSON.stringify(response));
			lib_Error("Script aborting due to unexpected error");
		}	
	}	
			
}



function updateIssueWithGraphQLID(issueId, graphQLId, originalBody) {
    var updatedBody = originalBody + "\n- **GraphQL ID**: " + graphQLId;
	

    var query = `
    mutation {
      updateIssue(input: {
        id: "${issueId}",
        body: "${updatedBody}"
      }) {
        issue {
          id
          title
          body
        }
      }
    }
    `;

    return sendGraphQLRequest(query);
}


function processConcepts(concepts) {
    for (let i = 0; i < concepts.length; i++) {
        console.log("\nConcept name: " + concepts[i].name);
        CreateOrUpdateGithubIssueFromArchiConcept(concepts[i]);
    }
}

var dctConceptTypeFilter = window.prompt("dct:type concept type filter", "epic");
if (!dctConceptTypeFilter) {
	let confirmed = window.confirm("Proceed to process all selected elements without filtering on dct:type?");
	if (!confirmed)
		lib_Error("Cancelled by user. Exiting...");;
}

var selectedConcepts = CSelection_GetSelectedConcepts("", "", dctConceptTypeFilter);
if (!selectedConcepts || selectedConcepts.size() === 0)
	lib_Error("No concepts selected. Hint: Check dct:type property. Exiting...");

processConcepts(selectedConcepts);

// Log the final rate limits
var finalRateLimits = getRateLimits(true);
//console.log("GitHub API requests remaining: " + finalRateLimits.remaining);
//console.log("Rate limit will be reset at: " + finalRateLimits.reset);


console.log("Script completed");